import { Resolver, Query, InputType, Mutation, Args } from '@nestjs/graphql';
import { MalwareService } from './malware.service';
import { CreateMalwareInput, UpdateMalwareInput } from './malware.input';
import { Malware } from './malware.entity';

import { PartialType } from '@nestjs/graphql';

@InputType()
export class SearchMalwareInput extends PartialType(CreateMalwareInput){}



@Resolver(() => Malware)
export class MalwareResolver {
  constructor(private readonly malwareService: MalwareService) {}

  // Create Malware
  @Mutation(() => Malware)
  async createMalware(@Args('createMalwareInput') createMalwareInput: CreateMalwareInput): Promise<Malware> {
    return this.malwareService.create(createMalwareInput);
  }

  // Get Malware by ID
  @Query(() => Malware, { nullable: true })
  async malware(@Args('id') id: string): Promise<Malware> {
    return this.malwareService.findOne(id);
  }

  // Update Malware
  @Mutation(() => Malware)
  async updateMalware(
    @Args('id') id: string,
    @Args('updateMalwareInput') updateMalwareInput: UpdateMalwareInput,
  ): Promise<Malware> {
    return this.malwareService.update(id, updateMalwareInput);
  }

  // Delete Malware
  @Mutation(() => Boolean)
  async removeMalware(@Args('id') id: string): Promise<boolean> {
    return this.malwareService.remove(id);
  }

  // Search Malware with Filters
  @Query(() => [Malware])
  async searchMalwareWithFilters(
    @Args('filters', { type: () => SearchMalwareInput, nullable: true }) filters?: Partial<SearchMalwareInput>,
    @Args('page', { type: () => Number, nullable: true }) page = 1,
    @Args('pageSize', { type: () => Number, nullable: true }) pageSize = 10,
  ): Promise<Malware[]> {
    const result = await this.malwareService.searchMalwareWithFilters(filters, page, pageSize);
    return result.results;
  }
}
