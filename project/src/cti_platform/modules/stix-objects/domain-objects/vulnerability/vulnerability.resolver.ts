import { Resolver, Query,InputType, Mutation, Args } from '@nestjs/graphql';
import { VulnerabilityService } from './vulnerability.service';
import { Vulnerability } from './vulnerability.entity';
import { CreateVulnerabilityInput, UpdateVulnerabilityInput } from './vulnerability.input';
import { PartialType } from '@nestjs/graphql';

@InputType()
export class SearchVulnerabilityInput extends PartialType(CreateVulnerabilityInput){}


@Resolver(() => Vulnerability)
export class VulnerabilityResolver {
  constructor(private readonly vulnerabilityService: VulnerabilityService) {}

  //  Create a new vulnerability
  @Mutation(() => Vulnerability)
  async createVulnerability(
    @Args('createVulnerabilityInput') createVulnerabilityInput: CreateVulnerabilityInput
  ): Promise<Vulnerability> {
    return this.vulnerabilityService.create(createVulnerabilityInput);
  }

  //  Find a vulnerability by ID
  @Query(() => Vulnerability, { nullable: true })
  async findVulnerabilityById(@Args('id') id: string): Promise<Vulnerability | null> {
    return this.vulnerabilityService.findOne(id);
  }

  //  Find a vulnerability by CVE ID
  @Query(() => Vulnerability, { nullable: true })
  async findVulnerabilityByCveId(@Args('cveId') cveId: string): Promise<Vulnerability | null> {
    return this.vulnerabilityService.findByCveId(cveId);
  }

  // Update a vulnerability
  @Mutation(() => Vulnerability)
  async updateVulnerability(
    @Args('id') id: string,
    @Args('updateVulnerabilityInput') updateVulnerabilityInput: UpdateVulnerabilityInput
  ): Promise<Vulnerability> {
    return this.vulnerabilityService.update(id, updateVulnerabilityInput);
  }

  //  Delete a vulnerability
  @Mutation(() => Boolean)
  async removeVulnerability(@Args('id') id: string): Promise<boolean> {
    return this.vulnerabilityService.remove(id);
  }

  //  Advanced search with filters
  @Query(() => Vulnerability)
  async searchVulnerabilities(
    @Args('filters', { type: () => SearchVulnerabilityInput, nullable: true }) filters?: Partial<SearchVulnerabilityInput>,
    @Args('page', { type: () => Number, defaultValue: 1 }) page?: number,
    @Args('pageSize', { type: () => Number, defaultValue: 10 }) pageSize?: number,
    @Args('sortField', { type: () => String, defaultValue: 'created' }) sortField?: string,
    @Args('sortOrder', { type: () => String, defaultValue: 'desc' }) sortOrder?: 'asc' | 'desc'
  ): Promise<any> {
    return this.vulnerabilityService.searchVulnerabilityWithFilters(filters, page, pageSize, sortField, sortOrder);
  }
}
