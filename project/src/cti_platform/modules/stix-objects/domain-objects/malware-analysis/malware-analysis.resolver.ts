import { Resolver, Query, InputType, Mutation, Args } from '@nestjs/graphql';
import { MalwareAnalysisService } from './malware-analysis.service';
import { MalwareAnalysis } from './malware-analysis.entity';
import { CreateMalwareAnalysisInput, UpdateMalwareAnalysisInput } from './malware-analysis.input';


import { PartialType } from '@nestjs/graphql';

@InputType()
export class SearchMalwareAnalysisInput extends PartialType(CreateMalwareAnalysisInput){}




@Resolver(() => MalwareAnalysis)
export class MalwareAnalysisResolver {
  constructor(private readonly malwareAnalysisService: MalwareAnalysisService) {}

  @Mutation(() => MalwareAnalysis)
  async createMalwareAnalysis(
    @Args('input') input: CreateMalwareAnalysisInput,
  ): Promise<MalwareAnalysis> {
    return this.malwareAnalysisService.create(input);
  }

  @Query(() => MalwareAnalysis, { nullable: true })
  async malwareAnalysis(@Args('id') id: string): Promise<MalwareAnalysis> {
    return this.malwareAnalysisService.findOne(id);
  }

  @Mutation(() => MalwareAnalysis)
  async updateMalwareAnalysis(
    @Args('id') id: string,
    @Args('input') input: UpdateMalwareAnalysisInput,
  ): Promise<MalwareAnalysis> {
    return this.malwareAnalysisService.update(id, input);
  }

  @Mutation(() => Boolean)
  async removeMalwareAnalysis(@Args('id') id: string): Promise<boolean> {
    return this.malwareAnalysisService.remove(id);
  }

  @Query(() => [MalwareAnalysis])
  async searchMalwareAnalysisWithFilters(
    @Args('filters', { type: () => SearchMalwareAnalysisInput, nullable: true }) filters?: Partial<SearchMalwareAnalysisInput>,
    @Args('page', { nullable: true, defaultValue: 1 }) page?: number,
    @Args('pageSize', { nullable: true, defaultValue: 10 }) pageSize?: number,
  ): Promise<MalwareAnalysis[]> {
    const result = await this.malwareAnalysisService.searchMalwareAnalysisWithFilters(filters, page, pageSize);
    return result.results;
  }
}
