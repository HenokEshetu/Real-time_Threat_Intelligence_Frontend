"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RRNLRequestError = void 0;
exports.createRequestError = createRequestError;
exports.formatGraphQLErrors = formatGraphQLErrors;
var _RelayRequest = _interopRequireDefault(require("./RelayRequest"));
var _RRNLError2 = _interopRequireDefault(require("./RRNLError"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var RRNLRequestError = /*#__PURE__*/function (_RRNLError) {
  _inherits(RRNLRequestError, _RRNLError);
  var _super = _createSuper(RRNLRequestError);
  function RRNLRequestError(msg) {
    var _this;
    _classCallCheck(this, RRNLRequestError);
    _this = _super.call(this, msg);
    _this.name = 'RRNLRequestError';
    return _this;
  }
  return _createClass(RRNLRequestError);
}(_RRNLError2["default"]);
/**
 * Formats an error response from GraphQL server request.
 */
exports.RRNLRequestError = RRNLRequestError;
function formatGraphQLErrors(request, errors) {
  var CONTEXT_BEFORE = 20;
  var CONTEXT_LENGTH = 60;
  if (!request.getQueryString) {
    return errors.join('\n');
  }
  var queryLines = [];
  var queryString = request.getQueryString();
  if (queryString) {
    // When using persisted query, queryString is an empty string.
    queryLines = queryString.split('\n');
  }
  return errors.map(function (_ref, ii) {
    var locations = _ref.locations,
      message = _ref.message;
    var prefix = "".concat(ii + 1, ". ");
    var indent = ' '.repeat(prefix.length);

    // custom errors thrown in graphql-server may not have locations
    var locationMessage = locations && queryLines.length ? '\n' + locations.map(function (_ref2) {
      var column = _ref2.column,
        line = _ref2.line;
      var queryLine = queryLines[line - 1];
      var offset = Math.min(column - 1, CONTEXT_BEFORE);
      return [queryLine.substr(column - 1 - offset, CONTEXT_LENGTH), "".concat(' '.repeat(Math.max(offset, 0)), "^^^")].map(function (messageLine) {
        return indent + messageLine;
      }).join('\n');
    }).join('\n') : '';
    return prefix + message + locationMessage;
  }).join('\n');
}
function createRequestError(req, res) {
  var errorReason = '';
  if (!res) {
    errorReason = 'Server return empty response.';
  } else if (res.errors) {
    if (req instanceof _RelayRequest["default"]) {
      errorReason = formatGraphQLErrors(req, res.errors);
    } else {
      errorReason = JSON.stringify(res.errors);
    }
  } else if (!res.json) {
    errorReason = (res.text ? res.text : "Server return empty response with Status Code: ".concat(res.status, ".")) + (res ? "\n\n".concat(res.toString()) : '');
  } else if (!res.data) {
    errorReason = 'Server return empty response.data.\n\n' + res.toString();
  }
  var error = new RRNLRequestError("Relay request for `".concat(req.getID(), "` failed by the following reasons:\n\n").concat(errorReason));
  error.req = req;
  error.res = res;
  return error;
}