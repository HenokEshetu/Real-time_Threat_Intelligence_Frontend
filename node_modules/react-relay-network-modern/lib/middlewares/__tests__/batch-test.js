"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _fetchMock = _interopRequireDefault(require("fetch-mock"));
var _formData = _interopRequireDefault(require("form-data"));
var _ = require("../..");
var _mockReq = require("../../__mocks__/mockReq");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
global.FormData = _formData["default"];
describe('middlewares/batch', function () {
  beforeEach(function () {
    _fetchMock["default"].restore();
  });
  it('should make a successfull single request', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var rnl, req, res;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _fetchMock["default"].post('/graphql', {
            data: {
              ok: 1
            }
          });
          rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)()]);
          req = (0, _mockReq.mockReq)(1);
          _context.next = 5;
          return req.execute(rnl);
        case 5:
          res = _context.sent;
          expect(res.data).toEqual({
            ok: 1
          });
          expect(_fetchMock["default"].lastOptions()).toMatchSnapshot();
        case 8:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
  it('should make a successfully batch request', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var rnl, req1, req2, _yield$Promise$all, _yield$Promise$all2, res1, res2;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _fetchMock["default"].mock({
            matcher: '/graphql/batch',
            response: {
              status: 200,
              body: [{
                data: {
                  ok: 1
                }
              }, {
                data: {
                  ok: 2
                }
              }]
            },
            method: 'POST'
          });
          rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)()]);
          req1 = (0, _mockReq.mockReq)(1);
          req2 = (0, _mockReq.mockReq)(2);
          _context2.next = 6;
          return Promise.all([req1.execute(rnl), req2.execute(rnl)]);
        case 6:
          _yield$Promise$all = _context2.sent;
          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);
          res1 = _yield$Promise$all2[0];
          res2 = _yield$Promise$all2[1];
          expect(res1.data).toEqual({
            ok: 1
          });
          expect(res2.data).toEqual({
            ok: 2
          });
          expect(_fetchMock["default"].lastOptions()).toMatchSnapshot();
        case 13:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  })));
  it('should make a successfully batch request with duplicate request payloads', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var rnl, req1, req2, req3, _yield$Promise$all3, _yield$Promise$all4, res1, res2, res3;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _fetchMock["default"].mock({
            matcher: '/graphql/batch',
            response: {
              status: 200,
              body: [{
                data: {
                  ok: 1
                }
              }, {
                data: {
                  ok: 2
                }
              }]
            },
            method: 'POST'
          });
          rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)()]);
          req1 = (0, _mockReq.mockReq)(2);
          req2 = (0, _mockReq.mockReq)(2, {
            query: 'duplicate',
            variables: {
              duplicate: true
            }
          });
          req3 = (0, _mockReq.mockReq)(2, {
            query: 'duplicate',
            variables: {
              duplicate: true
            }
          });
          _context3.next = 7;
          return Promise.all([req1.execute(rnl), req2.execute(rnl), req3.execute(rnl)]);
        case 7:
          _yield$Promise$all3 = _context3.sent;
          _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 3);
          res1 = _yield$Promise$all4[0];
          res2 = _yield$Promise$all4[1];
          res3 = _yield$Promise$all4[2];
          expect(res1.data).toEqual({
            ok: 1
          });
          expect(res2.data).toEqual({
            ok: 2
          });
          expect(res3.data).toEqual({
            ok: 2
          });
          expect(_fetchMock["default"].lastOptions()).toMatchSnapshot();
        case 16:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  })));
  it('should reject if server does not return response for duplicate request payloads', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    var rnl, req1, req2, req3, _yield$Promise$all5, _yield$Promise$all6, res1, res2, res3;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _fetchMock["default"].mock({
            matcher: '/graphql/batch',
            response: {
              status: 200,
              body: [{
                data: {
                  ok: 1
                }
              }]
            },
            method: 'POST'
          });
          rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)()]);
          req1 = (0, _mockReq.mockReq)(1);
          req2 = (0, _mockReq.mockReq)(2);
          req3 = (0, _mockReq.mockReq)(3);
          _context4.next = 7;
          return Promise.all([req1.execute(rnl), req2.execute(rnl)["catch"](function (e) {
            return e;
          }), req3.execute(rnl)["catch"](function (e) {
            return e;
          })]);
        case 7:
          _yield$Promise$all5 = _context4.sent;
          _yield$Promise$all6 = _slicedToArray(_yield$Promise$all5, 3);
          res1 = _yield$Promise$all6[0];
          res2 = _yield$Promise$all6[1];
          res3 = _yield$Promise$all6[2];
          expect(res1.data).toEqual({
            ok: 1
          });
          expect(res2).toBeInstanceOf(Error);
          expect(res2.toString()).toMatch('Server does not return response for request');
          expect(res3).toBeInstanceOf(Error);
          expect(res3.toString()).toMatch('Server does not return response for request');
          expect(_fetchMock["default"].lastOptions()).toMatchSnapshot();
        case 18:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  })));
  it('should handle network failure', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
    var rnl, req1, req2, _yield$Promise$all7, _yield$Promise$all8, res1, res2;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _fetchMock["default"].mock({
            matcher: '/graphql/batch',
            response: {
              "throws": new Error('Network connection error')
            },
            method: 'POST'
          });
          rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)()]);
          req1 = (0, _mockReq.mockReq)(1);
          req2 = (0, _mockReq.mockReq)(2);
          _context5.next = 6;
          return Promise.all([req1.execute(rnl)["catch"](function (e) {
            return e;
          }), req2.execute(rnl)["catch"](function (e) {
            return e;
          })]);
        case 6:
          _yield$Promise$all7 = _context5.sent;
          _yield$Promise$all8 = _slicedToArray(_yield$Promise$all7, 2);
          res1 = _yield$Promise$all8[0];
          res2 = _yield$Promise$all8[1];
          expect(res1).toBeInstanceOf(Error);
          expect(res1.toString()).toMatch('Network connection error');
          expect(res2).toBeInstanceOf(Error);
          expect(res2.toString()).toMatch('Network connection error');
          expect(_fetchMock["default"].lastOptions()).toMatchSnapshot();
        case 15:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  })));
  it('should handle server errors for one request', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
    var rnl, req1, req2, _yield$Promise$all9, _yield$Promise$all10, res1, res2;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _fetchMock["default"].mock({
            matcher: '/graphql/batch',
            response: {
              status: 200,
              body: [{
                payload: {
                  errors: [{
                    location: 1,
                    message: 'major error'
                  }]
                }
              }, {
                payload: {
                  data: {
                    ok: 2
                  }
                }
              }]
            },
            method: 'POST'
          });
          rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)()]);
          req1 = (0, _mockReq.mockReq)(1);
          req2 = (0, _mockReq.mockReq)(2); // prettier-ignore
          _context6.next = 6;
          return Promise.all([req1.execute(rnl)["catch"](function (e) {
            return e;
          }), req2.execute(rnl)]);
        case 6:
          _yield$Promise$all9 = _context6.sent;
          _yield$Promise$all10 = _slicedToArray(_yield$Promise$all9, 2);
          res1 = _yield$Promise$all10[0];
          res2 = _yield$Promise$all10[1];
          expect(res1).toBeInstanceOf(Error);
          expect(res1.toString()).toMatch('major error');
          expect(res2.data).toEqual({
            ok: 2
          });
          expect(res2.errors).toBeUndefined();
          expect(_fetchMock["default"].lastOptions()).toMatchSnapshot();
        case 15:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  })));
  it('should handle server errors for all requests', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
    var rnl, req1, req2, req3, _yield$Promise$all11, _yield$Promise$all12, res1, res2, res3;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          _fetchMock["default"].mock({
            matcher: '/graphql/batch',
            response: {
              status: 200,
              body: {
                errors: [{
                  location: 1,
                  message: 'major error'
                }]
              }
            },
            method: 'POST'
          });
          rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)()]);
          req1 = (0, _mockReq.mockReq)(1);
          req2 = (0, _mockReq.mockReq)(2);
          req3 = (0, _mockReq.mockReq)(3);
          _context7.next = 7;
          return Promise.all([req1.execute(rnl)["catch"](function (e) {
            return e;
          }), req2.execute(rnl)["catch"](function (e) {
            return e;
          }), req3.execute(rnl)["catch"](function (e) {
            return e;
          })]);
        case 7:
          _yield$Promise$all11 = _context7.sent;
          _yield$Promise$all12 = _slicedToArray(_yield$Promise$all11, 3);
          res1 = _yield$Promise$all12[0];
          res2 = _yield$Promise$all12[1];
          res3 = _yield$Promise$all12[2];
          expect(res1.toString()).toMatch('Wrong response');
          expect(res2.toString()).toMatch('Wrong response');
          expect(res3.toString()).toMatch('Wrong response');
          expect(_fetchMock["default"].lastOptions()).toMatchSnapshot();
        case 16:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  })));
  it('should handle responses without payload wrapper', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
    var rnl, req1, req2, _yield$Promise$all13, _yield$Promise$all14, res1, res2;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          _fetchMock["default"].mock({
            matcher: '/graphql/batch',
            response: {
              status: 200,
              body: [{
                errors: [{
                  location: 1,
                  message: 'major error'
                }]
              }, {
                data: {
                  ok: 2
                }
              }]
            },
            method: 'POST'
          });
          rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)()]);
          req1 = (0, _mockReq.mockReq)(1);
          req2 = (0, _mockReq.mockReq)(2); // prettier-ignore
          _context8.next = 6;
          return Promise.all([req1.execute(rnl)["catch"](function (e) {
            return e;
          }), req2.execute(rnl)]);
        case 6:
          _yield$Promise$all13 = _context8.sent;
          _yield$Promise$all14 = _slicedToArray(_yield$Promise$all13, 2);
          res1 = _yield$Promise$all14[0];
          res2 = _yield$Promise$all14[1];
          expect(res1).toBeInstanceOf(Error);
          expect(res1.toString()).toMatch('major error');
          expect(res2.data).toEqual({
            ok: 2
          });
          expect(res2.errors).toBeUndefined();
          expect(_fetchMock["default"].lastOptions()).toMatchSnapshot();
        case 15:
        case "end":
          return _context8.stop();
      }
    }, _callee8);
  })));
  it('should not batch requests cacheConfig `skipBatch=true`', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
    var rnl, req1, req2, req3, _yield$Promise$all15, _yield$Promise$all16, res1, res2, res3;
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          _fetchMock["default"].mock({
            matcher: '/graphql',
            response: {
              status: 200,
              body: {
                data: {
                  ok: 1
                }
              }
            },
            method: 'POST'
          });
          _fetchMock["default"].mock({
            matcher: '/graphql/batch',
            response: {
              status: 200,
              body: [{
                data: {
                  ok: 2
                }
              }, {
                data: {
                  ok: 3
                }
              }]
            },
            method: 'POST'
          });
          rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)()]);
          req1 = (0, _mockReq.mockReq)(1, {
            cacheConfig: {
              skipBatch: true
            }
          });
          req2 = (0, _mockReq.mockReq)(2);
          req3 = (0, _mockReq.mockReq)(3);
          _context9.next = 8;
          return Promise.all([req1.execute(rnl), req2.execute(rnl), req3.execute(rnl)]);
        case 8:
          _yield$Promise$all15 = _context9.sent;
          _yield$Promise$all16 = _slicedToArray(_yield$Promise$all15, 3);
          res1 = _yield$Promise$all16[0];
          res2 = _yield$Promise$all16[1];
          res3 = _yield$Promise$all16[2];
          expect(res1.data).toEqual({
            ok: 1
          });
          expect(res2.data).toEqual({
            ok: 2
          });
          expect(res3.data).toEqual({
            ok: 3
          });
        case 16:
        case "end":
          return _context9.stop();
      }
    }, _callee9);
  })));
  describe('option `batchTimeout`', function () {
    beforeEach(function () {
      _fetchMock["default"].restore();
    });
    it('should gather different requests into one batch request', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
      var rnl, reqs;
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            _fetchMock["default"].mock({
              matcher: '/graphql/batch',
              response: {
                status: 200,
                body: [{
                  data: {}
                }, {
                  data: {}
                }, {
                  data: {}
                }]
              },
              method: 'POST'
            });
            rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)({
              batchTimeout: 50
            })]);
            (0, _mockReq.mockReq)(1).execute(rnl);
            setTimeout(function () {
              return (0, _mockReq.mockReq)(2).execute(rnl);
            }, 30);
            _context10.next = 6;
            return (0, _mockReq.mockReq)(3).execute(rnl);
          case 6:
            reqs = _fetchMock["default"].calls('/graphql/batch');
            expect(reqs).toHaveLength(1);
            expect(_fetchMock["default"].lastOptions()).toMatchSnapshot();
          case 9:
          case "end":
            return _context10.stop();
        }
      }, _callee10);
    })));
    it('should gather different requests into two batch request', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
      var rnl;
      return _regeneratorRuntime().wrap(function _callee11$(_context11) {
        while (1) switch (_context11.prev = _context11.next) {
          case 0:
            _fetchMock["default"].mock({
              matcher: '/graphql/batch',
              response: {
                status: 200,
                body: [{
                  data: {}
                }, {
                  data: {}
                }, {
                  data: {}
                }, {
                  data: {}
                }]
              },
              method: 'POST'
            });
            rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)({
              batchTimeout: 100
            })]);
            (0, _mockReq.mockReq)(1).execute(rnl);
            setTimeout(function () {
              return (0, _mockReq.mockReq)(2).execute(rnl);
            }, 160);
            setTimeout(function () {
              return (0, _mockReq.mockReq)(3).execute(rnl);
            }, 170);
            (0, _mockReq.mockReq)(4).execute(rnl);
            _context11.next = 8;
            return new Promise(function (resolve, reject) {
              setTimeout(function () {
                try {
                  var reqs = _fetchMock["default"].calls('/graphql/batch');
                  expect(reqs).toHaveLength(2);
                  expect(_fetchMock["default"].calls('/graphql/batch')).toMatchSnapshot();
                  resolve();
                } catch (e) {
                  reject(e);
                }
              }, 300);
            });
          case 8:
          case "end":
            return _context11.stop();
        }
      }, _callee11);
    })));
  });
  describe('option `maxBatchSize`', function () {
    beforeEach(function () {
      _fetchMock["default"].restore();
    });
    it('should split large batched requests into multiple requests', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
      var rnl, req1, req2, req3, req4, req5, batchReqs, singleReqs;
      return _regeneratorRuntime().wrap(function _callee12$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            _fetchMock["default"].mock({
              matcher: '/graphql',
              response: {
                status: 200,
                body: {
                  data: {}
                }
              },
              method: 'POST'
            });
            _fetchMock["default"].mock({
              matcher: '/graphql/batch',
              response: {
                status: 200,
                body: [{
                  data: {}
                }, {
                  data: {}
                }, {
                  data: {}
                }, {
                  data: {}
                }]
              },
              method: 'POST'
            });
            rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)({
              maxBatchSize: 1024 * 10
            })]);
            req1 = (0, _mockReq.mockReqWithSize)(1, 1024 * 7);
            req2 = (0, _mockReq.mockReqWithSize)(2, 1024 * 2);
            req3 = (0, _mockReq.mockReqWithSize)(3, 1024 * 5);
            req4 = (0, _mockReq.mockReqWithSize)(4, 1024 * 4);
            req5 = (0, _mockReq.mockReqWithSize)(5, 1024 * 11);
            _context12.next = 10;
            return Promise.all([req1.execute(rnl), req2.execute(rnl), req3.execute(rnl), req4.execute(rnl), req5.execute(rnl)]);
          case 10:
            batchReqs = _fetchMock["default"].calls('/graphql/batch');
            singleReqs = _fetchMock["default"].calls('/graphql');
            expect(batchReqs).toHaveLength(2);
            expect(singleReqs).toHaveLength(1);
          case 14:
          case "end":
            return _context12.stop();
        }
      }, _callee12);
    })));
  });
  describe('option `allowMutations`', function () {
    beforeEach(function () {
      _fetchMock["default"].restore();
    });
    it('should not batch mutations by default', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
      var rnl, singleReqs;
      return _regeneratorRuntime().wrap(function _callee13$(_context13) {
        while (1) switch (_context13.prev = _context13.next) {
          case 0:
            _fetchMock["default"].mock({
              matcher: '/graphql',
              response: {
                status: 200,
                body: {
                  data: {}
                }
              },
              method: 'POST'
            });
            rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)({
              batchTimeout: 20
            })]);
            (0, _mockReq.mockMutationReq)(1).execute(rnl);
            _context13.next = 5;
            return (0, _mockReq.mockMutationReq)(1).execute(rnl);
          case 5:
            singleReqs = _fetchMock["default"].calls('/graphql');
            expect(singleReqs).toHaveLength(2);
            expect(_fetchMock["default"].calls('/graphql')).toMatchSnapshot();
          case 8:
          case "end":
            return _context13.stop();
        }
      }, _callee13);
    })));
    it('should not batch requests with FormData', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
      var rnl, singleReqs;
      return _regeneratorRuntime().wrap(function _callee14$(_context14) {
        while (1) switch (_context14.prev = _context14.next) {
          case 0:
            _fetchMock["default"].mock({
              matcher: '/graphql',
              response: {
                status: 200,
                body: {
                  data: {}
                }
              },
              method: 'POST'
            });
            rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)({
              batchTimeout: 20
            })]);
            (0, _mockReq.mockReqWithFiles)(1).execute(rnl);
            _context14.next = 5;
            return (0, _mockReq.mockReqWithFiles)(1).execute(rnl);
          case 5:
            singleReqs = _fetchMock["default"].calls('/graphql');
            expect(singleReqs).toHaveLength(2);
          case 7:
          case "end":
            return _context14.stop();
        }
      }, _callee14);
    })));
    it('should batch mutations if `allowMutations=true`', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
      var rnl, req1, req2, batchReqs;
      return _regeneratorRuntime().wrap(function _callee15$(_context15) {
        while (1) switch (_context15.prev = _context15.next) {
          case 0:
            _fetchMock["default"].mock({
              matcher: '/graphql/batch',
              response: {
                status: 200,
                body: [{
                  data: {}
                }, {
                  data: {}
                }]
              },
              method: 'POST'
            });
            rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)({
              batchTimeout: 20,
              allowMutations: true
            })]);
            req1 = (0, _mockReq.mockMutationReq)(1);
            req1.execute(rnl);
            req2 = (0, _mockReq.mockMutationReq)(2);
            _context15.next = 7;
            return req2.execute(rnl);
          case 7:
            batchReqs = _fetchMock["default"].calls('/graphql/batch');
            expect(batchReqs).toHaveLength(1);
            expect(_fetchMock["default"].lastOptions()).toMatchSnapshot();
          case 10:
          case "end":
            return _context15.stop();
        }
      }, _callee15);
    })));
    it('should not batch mutations with files if `allowMutations=true`', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
      var rnl, req1, req2, singleReqs;
      return _regeneratorRuntime().wrap(function _callee16$(_context16) {
        while (1) switch (_context16.prev = _context16.next) {
          case 0:
            _fetchMock["default"].mock({
              matcher: '/graphql',
              response: {
                status: 200,
                body: {
                  data: {}
                }
              },
              method: 'POST'
            });
            rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)({
              batchTimeout: 20,
              allowMutations: true
            })]);
            req1 = (0, _mockReq.mockMutationReq)(1, {
              files: {
                file1: 'data'
              }
            });
            req1.execute(rnl);
            req2 = (0, _mockReq.mockMutationReq)(2, {
              files: {
                file1: 'data'
              }
            });
            _context16.next = 7;
            return req2.execute(rnl);
          case 7:
            singleReqs = _fetchMock["default"].calls('/graphql');
            expect(singleReqs).toHaveLength(2);
          case 9:
          case "end":
            return _context16.stop();
        }
      }, _callee16);
    })));
  });
  it('should pass fetch options', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
    var rnl, req1, req2, batchReqs;
    return _regeneratorRuntime().wrap(function _callee17$(_context17) {
      while (1) switch (_context17.prev = _context17.next) {
        case 0:
          _fetchMock["default"].mock({
            matcher: '/graphql/batch',
            response: {
              status: 200,
              body: [{
                data: {}
              }, {
                data: {}
              }]
            },
            method: 'POST'
          });
          rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)({
            batchTimeout: 20,
            credentials: 'include',
            mode: 'cors',
            cache: 'no-store',
            redirect: 'follow'
          })]);
          req1 = (0, _mockReq.mockReq)(1);
          req1.execute(rnl);
          req2 = (0, _mockReq.mockReq)(2);
          _context17.next = 7;
          return req2.execute(rnl);
        case 7:
          batchReqs = _fetchMock["default"].calls('/graphql/batch');
          expect(batchReqs).toHaveLength(1);
          expect(_fetchMock["default"].lastOptions()).toEqual(expect.objectContaining({
            credentials: 'include',
            mode: 'cors',
            cache: 'no-store',
            redirect: 'follow'
          }));
        case 10:
        case "end":
          return _context17.stop();
      }
    }, _callee17);
  })));
  describe('headers option', function () {
    it('`headers` option as Object', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
      var rnl, req1, req2;
      return _regeneratorRuntime().wrap(function _callee18$(_context18) {
        while (1) switch (_context18.prev = _context18.next) {
          case 0:
            _fetchMock["default"].mock({
              matcher: '/graphql/batch',
              response: {
                status: 200,
                body: [{
                  data: {}
                }, {
                  data: {}
                }]
              },
              method: 'POST'
            });
            rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)({
              headers: {
                'custom-header': '123'
              }
            })]);
            req1 = (0, _mockReq.mockReq)(1);
            req2 = (0, _mockReq.mockReq)(2);
            _context18.next = 6;
            return Promise.all([req1.execute(rnl), req2.execute(rnl)]);
          case 6:
            expect(_fetchMock["default"].lastOptions().headers).toEqual(expect.objectContaining({
              'custom-header': '123'
            }));
          case 7:
          case "end":
            return _context18.stop();
        }
      }, _callee18);
    })));
    it('`headers` option as thunk', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
      var rnl, req1, req2;
      return _regeneratorRuntime().wrap(function _callee19$(_context19) {
        while (1) switch (_context19.prev = _context19.next) {
          case 0:
            _fetchMock["default"].mock({
              matcher: '/graphql/batch',
              response: {
                status: 200,
                body: [{
                  data: {}
                }, {
                  data: {}
                }]
              },
              method: 'POST'
            });
            rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)({
              headers: function headers() {
                return {
                  'thunk-header': '333'
                };
              }
            })]);
            req1 = (0, _mockReq.mockReq)(1);
            req2 = (0, _mockReq.mockReq)(2);
            _context19.next = 6;
            return Promise.all([req1.execute(rnl), req2.execute(rnl)]);
          case 6:
            expect(_fetchMock["default"].lastOptions().headers).toEqual(expect.objectContaining({
              'thunk-header': '333'
            }));
          case 7:
          case "end":
            return _context19.stop();
        }
      }, _callee19);
    })));
    it('`headers` option as thunk with Promise', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
      var rnl, req1, req2;
      return _regeneratorRuntime().wrap(function _callee20$(_context20) {
        while (1) switch (_context20.prev = _context20.next) {
          case 0:
            _fetchMock["default"].mock({
              matcher: '/graphql/batch',
              response: {
                status: 200,
                body: [{
                  data: {}
                }, {
                  data: {}
                }]
              },
              method: 'POST'
            });
            rnl = new _.RelayNetworkLayer([(0, _.batchMiddleware)({
              headers: function headers() {
                return Promise.resolve({
                  'thunk-header': 'as promise'
                });
              }
            })]);
            req1 = (0, _mockReq.mockReq)(1);
            req2 = (0, _mockReq.mockReq)(2);
            _context20.next = 6;
            return Promise.all([req1.execute(rnl), req2.execute(rnl)]);
          case 6:
            expect(_fetchMock["default"].lastOptions().headers).toEqual(expect.objectContaining({
              'thunk-header': 'as promise'
            }));
          case 7:
          case "end":
            return _context20.stop();
        }
      }, _callee20);
    })));
  });
});