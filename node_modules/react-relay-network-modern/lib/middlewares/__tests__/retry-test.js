"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var _fetchMock = _interopRequireDefault(require("fetch-mock"));
var _RelayNetworkLayer = _interopRequireDefault(require("../../RelayNetworkLayer"));
var _mockReq = require("../../__mocks__/mockReq");
var _retry = _interopRequireWildcard(require("../retry"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function sleep(_x) {
  return _sleep.apply(this, arguments);
}
function _sleep() {
  _sleep = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(timeout) {
    return _regeneratorRuntime().wrap(function _callee14$(_context14) {
      while (1) switch (_context14.prev = _context14.next) {
        case 0:
          return _context14.abrupt("return", new Promise(function (resolve) {
            setTimeout(resolve, timeout);
          }));
        case 1:
        case "end":
          return _context14.stop();
      }
    }, _callee14);
  }));
  return _sleep.apply(this, arguments);
}
describe('middlewares/retry', function () {
  describe('promiseWithTimeout()', function () {
    it('should return Promise result if not reach timeout ', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var p, r;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            p = Promise.resolve(5);
            _context.next = 3;
            return (0, _retry.promiseWithTimeout)(p, 1000, function () {
              return Promise.resolve(0);
            });
          case 3:
            r = _context.sent;
            expect(r).toBe(5);
          case 5:
          case "end":
            return _context.stop();
        }
      }, _callee);
    })));
    it('should run `onTimeout` when timout is reached', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var p, onTimeout, r;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            p = new Promise(function (resolve) {
              setTimeout(function () {
                resolve(333);
              }, 20);
            });
            onTimeout = jest.fn(function () {
              return Promise.resolve(555);
            });
            _context2.next = 4;
            return (0, _retry.promiseWithTimeout)(p, 10, onTimeout);
          case 4:
            r = _context2.sent;
            expect(onTimeout).toHaveBeenCalledTimes(1);
            expect(r).toBe(555);
          case 7:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    })));
  });
  describe('delayedExecution()', function () {
    it('should run function after delay', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var execFn, _delayedExecution, promise, r;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            execFn = jest.fn(function () {
              return Promise.resolve(777);
            });
            _delayedExecution = (0, _retry.delayedExecution)(execFn, 10), promise = _delayedExecution.promise;
            _context3.next = 4;
            return sleep(5);
          case 4:
            expect(execFn).toHaveBeenCalledTimes(0);
            _context3.next = 7;
            return sleep(10);
          case 7:
            expect(execFn).toHaveBeenCalledTimes(1);
            _context3.next = 10;
            return promise;
          case 10:
            r = _context3.sent;
            expect(r).toBe(777);
          case 12:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    })));
    it('should run function immediately after `forceExec` call', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var execFn, _delayedExecution2, promise, forceExec, r;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            execFn = jest.fn(function () {
              return Promise.resolve(888);
            });
            _delayedExecution2 = (0, _retry.delayedExecution)(execFn, 1000), promise = _delayedExecution2.promise, forceExec = _delayedExecution2.forceExec;
            _context4.next = 4;
            return sleep(5);
          case 4:
            expect(execFn).toHaveBeenCalledTimes(0);
            forceExec();
            _context4.next = 8;
            return sleep(1);
          case 8:
            expect(execFn).toHaveBeenCalledTimes(1);
            _context4.next = 11;
            return promise;
          case 11:
            r = _context4.sent;
            expect(r).toBe(888);
          case 13:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    })));
    it('should abort function after `abort` call', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      var execFn, _delayedExecution3, promise, abort;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            execFn = jest.fn(function () {
              return Promise.resolve(999);
            });
            _delayedExecution3 = (0, _retry.delayedExecution)(execFn, 1000), promise = _delayedExecution3.promise, abort = _delayedExecution3.abort;
            _context5.next = 4;
            return sleep(5);
          case 4:
            expect(execFn).toHaveBeenCalledTimes(0);
            abort();
            _context5.next = 8;
            return expect(promise).rejects.toThrow(/aborted/i);
          case 8:
            expect(execFn).toHaveBeenCalledTimes(0);
          case 9:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    })));
  });
  describe('middleware', function () {
    beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return sleep(5);
          case 2:
            // fix: some strange error
            _fetchMock["default"].restore();
          case 3:
          case "end":
            return _context6.stop();
        }
      }, _callee6);
    })));
    it('should make retries', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
      var attempt, rnl, res, reqs;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            // First 2 requests return code 500,
            // 3rd request returns code 200
            attempt = 0;
            _fetchMock["default"].mock({
              matcher: '/graphql',
              response: function response() {
                attempt++;
                if (attempt < 3) {
                  return {
                    status: 500,
                    body: ''
                  };
                }
                return {
                  status: 200,
                  body: {
                    data: 'PAYLOAD'
                  }
                };
              },
              method: 'POST'
            });
            rnl = new _RelayNetworkLayer["default"]([(0, _retry["default"])({
              retryDelays: function retryDelays() {
                return 1;
              },
              logger: false
            })]);
            _context7.next = 5;
            return (0, _mockReq.mockReq)(1).execute(rnl);
          case 5:
            res = _context7.sent;
            expect(res.data).toEqual('PAYLOAD');
            reqs = _fetchMock["default"].calls('/graphql');
            expect(reqs).toHaveLength(3);
            expect(reqs).toMatchSnapshot();
          case 10:
          case "end":
            return _context7.stop();
        }
      }, _callee7);
    })));
    it('should retry request on timeout', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      var attempt, rnl, reqs;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            attempt = 0; // First 2 requests answered after 50ms
            // 3rd request returns without delay
            _fetchMock["default"].mock({
              matcher: '/graphql',
              response: function response() {
                attempt++;
                return new Promise(function (resolve) {
                  setTimeout(function () {
                    return resolve({
                      status: 200,
                      body: {
                        data: 'PAYLOAD'
                      }
                    });
                  }, attempt <= 2 ? 100 : 0);
                });
              },
              method: 'POST'
            });
            rnl = new _RelayNetworkLayer["default"]([(0, _retry["default"])({
              fetchTimeout: 20,
              retryDelays: function retryDelays() {
                return 1;
              },
              logger: false
            })]);
            _context8.next = 5;
            return (0, _mockReq.mockReq)(1).execute(rnl);
          case 5:
            reqs = _fetchMock["default"].calls('/graphql');
            expect(reqs).toHaveLength(3);
            expect(reqs).toMatchSnapshot();
          case 8:
          case "end":
            return _context8.stop();
        }
      }, _callee8);
    })));
    it('should allow fetchTimeout to specify a function or number', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
      var rnl;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            // returns request after 30ms
            // 3rd request should work
            _fetchMock["default"].mock({
              matcher: '/graphql',
              response: function response() {
                return new Promise(function (resolve) {
                  setTimeout(function () {
                    return resolve({
                      status: 200,
                      body: {
                        data: 'PAYLOAD'
                      }
                    });
                  }, 30);
                });
              },
              method: 'POST'
            });
            rnl = new _RelayNetworkLayer["default"]([(0, _retry["default"])({
              fetchTimeout: function fetchTimeout(attempt) {
                return attempt < 2 ? 5 : 100;
              },
              retryDelays: function retryDelays() {
                return 1;
              },
              logger: false
            })]);
            (0, _mockReq.mockReq)(1).execute(rnl);
            _context9.next = 5;
            return sleep(60);
          case 5:
            expect(_fetchMock["default"].calls('/graphql')).toHaveLength(3);
          case 6:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    })));
    it('should throw error on timeout', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
      var rnl;
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            // returns request after 100ms
            _fetchMock["default"].mock({
              matcher: '/graphql',
              response: function response() {
                return new Promise(function (resolve) {
                  setTimeout(function () {
                    return resolve({
                      status: 200,
                      body: {
                        data: 'PAYLOAD'
                      }
                    });
                  }, 100);
                });
              },
              method: 'POST'
            });
            rnl = new _RelayNetworkLayer["default"]([(0, _retry["default"])({
              fetchTimeout: 20,
              retryDelays: [1],
              logger: false
            })]);
            _context10.next = 4;
            return expect((0, _mockReq.mockReq)(1).execute(rnl)).rejects.toThrow('Reached request timeout in 20 ms');
          case 4:
            expect(_fetchMock["default"].calls('/graphql')).toHaveLength(2);
          case 5:
          case "end":
            return _context10.stop();
        }
      }, _callee10);
    })));
    it('should work forceRetry callback when request delayed', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
      var attempt, forceRetry, rnl, resPromise;
      return _regeneratorRuntime().wrap(function _callee11$(_context11) {
        while (1) switch (_context11.prev = _context11.next) {
          case 0:
            // First request will be fulfilled after 100ms delay
            // 2nd request and the following - without delays
            attempt = 0;
            _fetchMock["default"].mock({
              matcher: '/graphql',
              response: function response() {
                attempt++;
                return new Promise(function (resolve) {
                  setTimeout(function () {
                    return resolve({
                      status: 200,
                      body: {
                        data: 'PAYLOAD'
                      }
                    });
                  }, attempt === 1 ? 100 : 0);
                });
              },
              method: 'POST'
            });

            // will call force retry after 30 ms
            forceRetry = jest.fn(function (runNow) {
              setTimeout(function () {
                runNow();
              }, 30);
            });
            rnl = new _RelayNetworkLayer["default"]([(0, _retry["default"])({
              fetchTimeout: 10,
              retryDelays: function retryDelays() {
                return 199;
              },
              logger: false,
              forceRetry: forceRetry
            })]); // make request
            resPromise = (0, _mockReq.mockReq)(1).execute(rnl);
            _context11.next = 7;
            return sleep(1);
          case 7:
            // should be sended first request (server will respond after 100 ms)
            expect(_fetchMock["default"].calls('/graphql')).toHaveLength(1);
            _context11.next = 10;
            return sleep(10);
          case 10:
            // after 10 ms should be reached `fetchTimeout`
            // so middleware hang request
            // and starts 199ms delayed period before making a new request
            // when delay period was started, should be called forceRetry method
            expect(forceRetry).toHaveBeenCalledTimes(1);
            // second arg of forceRetry call should be delay period in ms
            expect(forceRetry.mock.calls[0][1]).toBe(199);
            // on 30 ms will be called `runNow` function
            _context11.next = 14;
            return sleep(50);
          case 14:
            // so Middlware should made second request under the hood
            expect(_fetchMock["default"].calls('/graphql')).toHaveLength(2);
            _context11.t0 = expect;
            _context11.next = 18;
            return resPromise;
          case 18:
            _context11.t1 = _context11.sent.data;
            (0, _context11.t0)(_context11.t1).toBe('PAYLOAD');
            _context11.next = 22;
            return sleep(200);
          case 22:
            expect(_fetchMock["default"].calls('/graphql')).toHaveLength(2);
          case 23:
          case "end":
            return _context11.stop();
        }
      }, _callee11);
    })));
    it('should call `beforeRetry` when request delayed', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
      var attempt, beforeRetry, rnl, resPromise;
      return _regeneratorRuntime().wrap(function _callee12$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            // First request will be fulfilled after 100ms delay
            // 2nd request and next without delays
            attempt = 0;
            _fetchMock["default"].mock({
              matcher: '/graphql',
              response: function response() {
                attempt++;
                return new Promise(function (resolve) {
                  setTimeout(function () {
                    return resolve({
                      status: 200,
                      body: {
                        data: 'PAYLOAD'
                      }
                    });
                  }, attempt === 1 ? 100 : 0);
                });
              },
              method: 'POST'
            });

            // will call force retry after 30 ms
            beforeRetry = jest.fn(function (_ref13) {
              var forceRetry = _ref13.forceRetry;
              setTimeout(function () {
                forceRetry();
              }, 30);
            });
            rnl = new _RelayNetworkLayer["default"]([(0, _retry["default"])({
              fetchTimeout: 10,
              retryDelays: function retryDelays() {
                return 999;
              },
              logger: false,
              beforeRetry: beforeRetry
            })]); // make request
            resPromise = (0, _mockReq.mockReq)(1).execute(rnl);
            _context12.next = 7;
            return sleep(1);
          case 7:
            // should be sended first request (server will respond after 100 ms)
            expect(_fetchMock["default"].calls('/graphql')).toHaveLength(1);
            _context12.next = 10;
            return sleep(10);
          case 10:
            // after 10 ms should be reached `fetchTimeout`
            // so middleware hang request
            // and starts 1000ms delayed period before making a new request
            // when delay period was started, should be called forceRetry method
            expect(beforeRetry).toHaveBeenCalledTimes(1);
            expect(beforeRetry.mock.calls[0][0]).toEqual({
              attempt: 1,
              delay: 999,
              forceRetry: expect.anything(),
              abort: expect.anything(),
              lastError: expect.objectContaining({
                message: 'Reached request timeout in 10 ms'
              }),
              req: expect.anything()
            });
            // on 30 ms will be called `forceRetry` function
            _context12.next = 14;
            return sleep(50);
          case 14:
            // so we make second request before delay period will end
            expect(_fetchMock["default"].calls('/graphql')).toHaveLength(2);
            _context12.t0 = expect;
            _context12.next = 18;
            return resPromise;
          case 18:
            _context12.t1 = _context12.sent.data;
            (0, _context12.t0)(_context12.t1).toBe('PAYLOAD');
          case 20:
          case "end":
            return _context12.stop();
        }
      }, _callee12);
    })));
    it('should call `beforeRetry` and reject request if called `abort`', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
      var attempt, customAbortedMsg, beforeRetry, rnl, resPromise;
      return _regeneratorRuntime().wrap(function _callee13$(_context13) {
        while (1) switch (_context13.prev = _context13.next) {
          case 0:
            // First request will be fulfilled after 100ms delay
            // 2nd request and further - without delays
            attempt = 0;
            customAbortedMsg = 'custom aborted in before beforeRetry';
            _fetchMock["default"].mock({
              matcher: '/graphql',
              response: function response() {
                attempt++;
                return new Promise(function (resolve) {
                  setTimeout(function () {
                    return resolve({
                      status: 200,
                      body: {
                        data: 'PAYLOAD'
                      }
                    });
                  }, attempt === 1 ? 100 : 0);
                });
              },
              method: 'POST'
            });

            // will call force retry after 30 ms
            beforeRetry = jest.fn(function (_ref15) {
              var abort = _ref15.abort;
              abort(customAbortedMsg);
            });
            rnl = new _RelayNetworkLayer["default"]([(0, _retry["default"])({
              fetchTimeout: 10,
              retryDelays: function retryDelays() {
                return 999;
              },
              logger: false,
              beforeRetry: beforeRetry
            })]); // make request
            resPromise = (0, _mockReq.mockReq)(1).execute(rnl);
            _context13.next = 8;
            return sleep(1);
          case 8:
            // should be sended first request (server will respond after 100 ms)
            expect(_fetchMock["default"].calls('/graphql')).toHaveLength(1);
            _context13.next = 11;
            return sleep(10);
          case 11:
            // after 10 ms should be reached `fetchTimeout`
            // so middleware hang request
            // and starts 1000ms delayed period before making a new request
            // when delay period was started, should be called `abort` method
            expect(beforeRetry).toHaveBeenCalledTimes(1);
            expect(beforeRetry.mock.calls[0][0]).toEqual({
              attempt: 1,
              delay: 999,
              forceRetry: expect.anything(),
              abort: expect.anything(),
              lastError: expect.objectContaining({
                message: 'Reached request timeout in 10 ms'
              }),
              req: expect.anything()
            });
            _context13.next = 15;
            return expect(resPromise).rejects.toThrow(customAbortedMsg);
          case 15:
            // we should not make second request
            expect(_fetchMock["default"].calls('/graphql')).toHaveLength(1);
          case 16:
          case "end":
            return _context13.stop();
        }
      }, _callee13);
    })));
  });
});