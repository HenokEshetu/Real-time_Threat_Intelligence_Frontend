import React from "react";
import { useQuery } from "@apollo/client";
import { useParams, useNavigate } from "react-router-dom";
import { MALWARE_QUERY } from "@/graphql/malware/queries";
import { Radarchart } from "../RadarChart";

// Mock/fallbacks for missing fields
const mockLabels: string[] = ["trojan", "ransomware"];
const mockMalwareTypes: string[] = ["ransomware", "worm", "adware"];
const mockKillChainPhases: { kill_chain_name?: string; phase_name?: string; id?: string }[] = [];
const mockCapabilities: string[] = [];
const mockImplementationLanguages: string[] = [];
const mockArchEnvs: string[] = [];
const mockSampleRefs: string[] = [];
const mockOSRefs: string[] = [];
const mockMarkings: string[] = ["TLP:CLEAR"];
const mockRadarData = [
  { feeling: "Strongly Disagree", level: 186 },
  { feeling: "Disagree", level: 305 },
  { feeling: "Neutral", level: 237 },
  { feeling: "Agree", level: 273 },
  { feeling: "Strongly Agree", level: 209 },
];

const MalwareDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { data, loading, error } = useQuery(MALWARE_QUERY, { variables: { id } });

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[40vh]">
        <span className="text-gray-400">Loading...</span>
      </div>
    );
  }
  if (error || !data?.malware) {
    return (
      <div className="flex items-center justify-center min-h-[40vh]">
        <span className="text-red-500">Failed to load malware.</span>
      </div>
    );
  }

  const malware = data.malware;

  // Use backend data if available, fallback to mock
  const name = malware.name || "-";
  const description = malware.description || "-";
  const isFamily = malware.is_family ? "Yes" : "No";
  const labels = malware.labels && malware.labels.length > 0 ? malware.labels : mockLabels;
  const aliases = malware.aliases && malware.aliases.length > 0 ? malware.aliases : [];
  // Always use sample data for malwareTypes for now (since not in query)
  const malwareTypes = mockMalwareTypes;
  const confidence = malware.confidence ?? "-";
  const createdBy = malware.created_by_ref || "-";
  const created = malware.created ? new Date(malware.created).toLocaleString() : "-";
  const modified = malware.modified ? new Date(malware.modified).toLocaleString() : "-";
  const firstSeen = malware.first_seen ? new Date(malware.first_seen).toLocaleString() : "-";
  const lastSeen = malware.last_seen ? new Date(malware.last_seen).toLocaleString() : "-";
  const killChainPhases = malware.kill_chain_phases && malware.kill_chain_phases.length > 0 ? malware.kill_chain_phases : mockKillChainPhases;
  const capabilities = malware.capabilities && malware.capabilities.length > 0 ? malware.capabilities : mockCapabilities;
  const implementationLanguages = malware.implementation_languages && malware.implementation_languages.length > 0 ? malware.implementation_languages : mockImplementationLanguages;
  const archEnvs = malware.architecture_execution_envs && malware.architecture_execution_envs.length > 0 ? malware.architecture_execution_envs : mockArchEnvs;
  const sampleRefs = malware.sample_refs && malware.sample_refs.length > 0 ? malware.sample_refs : mockSampleRefs;
  const osRefs = malware.operating_system_refs && malware.operating_system_refs.length > 0 ? malware.operating_system_refs : mockOSRefs;
  const markings = malware.object_marking_refs && malware.object_marking_refs.length > 0 ? malware.object_marking_refs : mockMarkings;
  const revoked = malware.revoked ? "Yes" : "No";
  const lang = malware.lang || "-";
  const extensions = malware.extensions || "-";
  const relationships = malware.relationship || [];
  const externalReferences = malware.external_references || [];

  return (
    <div className="w-full flex flex-col gap-8 px-3">
      {/* First row: two containers, each takes half width */}
      <div className="flex flex-row gap-6 w-full items-stretch">
        {/* Left container: Description, Aliases, Malware Types, First/Last Seen */}
        <div className="flex-1 min-w-0 bg-white rounded-lg p-5 border border-gray-300 flex flex-col items-stretch">
          <div className="flex flex-col flex-1">
            <div className="flex flex-row gap-6 h-full">
              <div className="flex-1 min-w-0 flex flex-col">
                <h2 className="text-base font-semibold text-foreground mb-2">Description</h2>
                <div className="text-md font-normal text-slate-600 mb-4">
                  {description || <span className="text-gray-400">No description.</span>}
                </div>
                <div className="mb-4">
                  <h2 className="text-base font-semibold text-foreground mb-2">Aliases</h2>
                  <div className="flex flex-wrap gap-2">
                    {aliases.length > 0 ? (
                      aliases.map((alias: string) => (
                        <span
                          key={alias}
                          className="bg-blue-50 text-blue-900 border-blue-200 border rounded p-1 text-xs"
                        >
                          {alias}
                        </span>
                      ))
                    ) : (
                      <span className="text-gray-400 text-xs">-</span>
                    )}
                  </div>
                </div>
                <div className="mb-4">
                  <h2 className="text-base font-semibold text-foreground mb-2">Malware Types</h2>
                  <div className="flex flex-wrap gap-2">
                    {malwareTypes.map((type: string) => (
                      <span
                        key={type}
                        className="bg-green-100 text-green-800 border border-green-400 rounded p-1 text-xs"
                      >
                        {type}
                      </span>
                    ))}
                  </div>
                </div>
                <div className="flex flex-row gap-4">
                  <div>
                    <h2 className="text-base font-semibold text-foreground mb-1">First Seen</h2>
                    <div className="text-xs text-blue-900 font-mono">{firstSeen}</div>
                  </div>
                  <div>
                    <h2 className="text-base font-semibold text-foreground mb-1">Last Seen</h2>
                    <div className="text-xs text-blue-900 font-mono">{lastSeen}</div>
                  </div>
                </div>
              </div>
              {/* No chart here */}
            </div>
          </div>
        </div>
        {/* Right container: Basic Information, Radar Chart, Labels */}
        <div className="flex-1 min-w-0 bg-white rounded-lg p-5 border border-gray-300 flex flex-col gap-4 max-w-full items-stretch">
          <h2 className="text-base font-semibold text-foreground mb-2">Basic Information</h2>
          <div className="space-y-4 p-2 flex-1">
            <div className="flex flex-row gap-4">
              <div className="w-[48%]">
                <h2 className="font-bold text-sm mb-2">Is Family</h2>
                <span className="bg-blue-100 text-blue-800 border border-blue-800 py-1 px-5 rounded text-sm text-center uppercase">
                  {isFamily}
                </span>
              </div>
              <div className="w-[48%]">
                <h2 className="font-bold text-sm mb-2">Marking</h2>
                <span className="bg-gray-100 text-gray-800 border border-gray-800 py-1 px-5 rounded text-sm text-center uppercase">
                  {markings.join(", ")}
                </span>
              </div>
            </div>
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <Radarchart
                  title="Distribution of opinions"
                  desc="please give your opinion"
                  footer={
                    <div className="text-xs text-gray-500 text-center mt-2">
                      Last updated: {modified}
                    </div>
                  }
                  data={mockRadarData}
                />
              </div>
              <div className="flex-1">
                <h2 className="font-semibold text-base mb-2">Labels</h2>
                <div className="flex flex-wrap gap-2">
                  {labels.map((label: string) => (
                    <span
                      key={label}
                      className={`px-2 py-1 rounded text-xs font-semibold border ${
                        label === "trojan"
                          ? "bg-pink-100 text-pink-600 border-pink-400"
                          : "bg-blue-100 text-blue-600 border-blue-400"
                      }`}
                    >
                      {label}
                    </span>
                  ))}
                </div>
              </div>
            </div>
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <h2 className="font-bold text-base mb-2">Created By</h2>
                <div className="bg-slate-200 p-2 rounded text-sm uppercase">
                  {createdBy}
                </div>
              </div>
              <div className="flex-1">
                <h2 className="font-bold text-base mb-2">Revoked</h2>
                <div className="bg-slate-200 p-2 rounded text-sm uppercase">
                  {revoked}
                </div>
              </div>
            </div>
            <div className="space-y-1 text-sm">
              <div>
                <strong>Created:</strong>{" "}
                {created}
              </div>
              <div>
                <strong>Modified:</strong>{" "}
                {modified}
              </div>
              <div>
                <strong>Language:</strong>{" "}
                {lang}
              </div>
              <div>
                <strong>Extensions:</strong>{" "}
                {typeof extensions === "string" ? extensions : JSON.stringify(extensions)}
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* Capabilities, Implementation Languages, Architecture Envs */}
      <div className="flex flex-row gap-6 w-full">
        <div className="flex-1 bg-white rounded-lg p-5 border border-gray-300">
          <h2 className="text-base font-semibold mb-2">Capabilities</h2>
          <div className="flex flex-wrap gap-2">
            {capabilities.length > 0 ? capabilities.map((cap: string) => (
              <span key={cap} className="bg-purple-100 text-purple-800 border border-purple-400 rounded p-1 text-xs">{cap}</span>
            )) : <span className="text-gray-400 text-xs">-</span>}
          </div>
        </div>
        <div className="flex-1 bg-white rounded-lg p-5 border border-gray-300">
          <h2 className="text-base font-semibold mb-2">Implementation Languages</h2>
          <div className="flex flex-wrap gap-2">
            {implementationLanguages.length > 0 ? implementationLanguages.map((lang: string) => (
              <span key={lang} className="bg-yellow-100 text-yellow-800 border border-yellow-400 rounded p-1 text-xs">{lang}</span>
            )) : <span className="text-gray-400 text-xs">-</span>}
          </div>
        </div>
        <div className="flex-1 bg-white rounded-lg p-5 border border-gray-300">
          <h2 className="text-base font-semibold mb-2">Architecture Execution Envs</h2>
          <div className="flex flex-wrap gap-2">
            {archEnvs.length > 0 ? archEnvs.map((env: string) => (
              <span key={env} className="bg-teal-100 text-teal-800 border border-teal-400 rounded p-1 text-xs">{env}</span>
            )) : <span className="text-gray-400 text-xs">-</span>}
          </div>
        </div>
      </div>
      {/* Sample Refs, OS Refs */}
      <div className="flex flex-row gap-6 w-full">
        <div className="flex-1 bg-white rounded-lg p-5 border border-gray-300">
          <h2 className="text-base font-semibold mb-2">Sample Refs</h2>
          <div className="flex flex-wrap gap-2">
            {sampleRefs.length > 0 ? sampleRefs.map((ref: string) => (
              <span key={ref} className="bg-indigo-100 text-indigo-800 border border-indigo-400 rounded p-1 text-xs">{ref}</span>
            )) : <span className="text-gray-400 text-xs">-</span>}
          </div>
        </div>
        <div className="flex-1 bg-white rounded-lg p-5 border border-gray-300">
          <h2 className="text-base font-semibold mb-2">Operating System Refs</h2>
          <div className="flex flex-wrap gap-2">
            {osRefs.length > 0 ? osRefs.map((os: string) => (
              <span key={os} className="bg-rose-100 text-rose-800 border border-rose-400 rounded p-1 text-xs">{os}</span>
            )) : <span className="text-gray-400 text-xs">-</span>}
          </div>
        </div>
      </div>
      {/* Kill Chain Phases */}
      {killChainPhases.length > 0 && (
        <div className="mt-2 bg-white rounded-lg p-5 border border-gray-300">
          <h2 className="text-xl font-bold mb-4">Kill Chain Phases</h2>
          <table className="w-full text-sm">
            <thead>
              <tr className="border-b">
                <th className="text-left p-2">Kill Chain Name</th>
                <th className="text-left p-2">Phase Name</th>
              </tr>
            </thead>
            <tbody>
              {killChainPhases.map((phase: any, idx: number) => (
                <tr key={idx} className="border-b hover:bg-slate-50">
                  <td className="p-2">{phase.kill_chain_name}</td>
                  <td className="p-2">{phase.phase_name}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      {/* Relationships Section */}
      {relationships.length > 0 && (
        <div className="mt-2 bg-white rounded-lg p-5 border border-gray-300">
          <h2 className="text-xl font-bold mb-4">Relationships</h2>
          <table className="w-full text-sm">
            <thead>
              <tr className="border-b">
                <th className="text-left p-2">ID</th>
                <th className="text-left p-2">Source Ref</th>
                <th className="text-left p-2">Target Ref</th>
                <th className="text-left p-2">Type</th>
              </tr>
            </thead>
            <tbody>
              {relationships.map((rel: any, idx: number) => (
                <tr key={idx} className="border-b hover:bg-slate-50">
                  <td className="p-2">{rel.id}</td>
                  <td className="p-2">{rel.source_ref}</td>
                  <td className="p-2">{rel.target_ref}</td>
                  <td className="p-2">{rel.type}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      {/* External Reference Section */}
      {externalReferences.length > 0 && (
        <div className="mt-2 bg-white rounded-lg p-5 border border-gray-300">
          <h2 className="text-xl font-bold mb-4">External References</h2>
          <table className="w-full text-sm">
            <thead>
              <tr className="border-b">
                <th className="text-left p-2">Source Name</th>
                <th className="text-left p-2">URL</th>
                <th className="text-left p-2">Description</th>
              </tr>
            </thead>
            <tbody>
              {externalReferences.map((ref: any, idx: number) => (
                <tr key={idx} className="border-b hover:bg-slate-50">
                  <td className="p-2">
                    <span className="bg-blue-50 text-blue-600 border border-blue-400 rounded px-2 py-1 text-xs font-semibold">
                      {ref.source_name}
                    </span>
                  </td>
                  <td className="p-2">
                    {ref.url ? (
                      <a
                        href={ref.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-700 underline break-all"
                      >
                        {ref.url}
                      </a>
                    ) : (
                      <span className="text-gray-400">-</span>
                    )}
                  </td>
                  <td className="p-2">
                    {ref.description ? (
                      <span>{ref.description}</span>
                    ) : (
                      <span className="text-gray-400">-</span>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      {/* Floating Edit Button */}
      <button
        className="fixed bottom-8 right-8 z-50 bg-blue-600 hover:bg-blue-700 active:bg-blue-800 text-white rounded-full shadow-lg p-4 flex items-center justify-center transition-colors group"
        title="Edit Malware"
        onClick={() => {
          if (id) navigate(`/malwares/${id}/edit`);
        }}
      >
        {/* Pencil-square icon */}
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="w-7 h-7 transition-transform duration-150 group-hover:scale-110 group-active:scale-95"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          strokeWidth={1.5}
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            d="M16.862 3.487a2.1 2.1 0 1 1 2.97 2.97L7.5 18.79l-4 1 1-4 12.362-12.303ZM19 7l-2-2M5 21h14"
          />
        </svg>
      </button>
    </div>
  );
};

export default MalwareDetail;
