import { useQuery, useMutation } from '@apollo/client';
import {
  SEARCH_VULNERABILITIES,
  GET_VULNERABILITY,
  GET_VULNERABILITY_BY_CVE,
} from '@/graphql/vulnerability/queries';
import {
  CREATE_VULNERABILITY,
  UPDATE_VULNERABILITY,
  DELETE_VULNERABILITY,
} from '@/graphql/vulnerability/mutations';
import { VulnerabilitySearchResult } from '@/types/vulnerability';

export const useVulnerabilities = ({
  filters = {},
  page = 1,
  pageSize = 10,
  sortField = 'modified',
  sortOrder = 'desc',
}: {
  filters?: Record<string, any>;
  page?: number;
  pageSize?: number;
  sortField?: string;
  sortOrder?: string;
}) => {
  const { data, loading, error, fetchMore } = useQuery(SEARCH_VULNERABILITIES, {
    variables: { filters, page, pageSize, sortField, sortOrder },
    notifyOnNetworkStatusChange: true,
  });

  const vulnerabilities = data?.searchVulnerabilities?.results || [];
  const total = data?.searchVulnerabilities?.total || 0;

  const loadMore = () => {
    fetchMore({
      variables: { filters, page: page + 1, pageSize, sortField, sortOrder },
      updateQuery: (prev, { fetchMoreResult }) => {
        if (!fetchMoreResult) return prev;
        return {
          searchVulnerabilities: {
            ...fetchMoreResult.searchVulnerabilities,
            results: [
              ...(prev?.searchVulnerabilities?.results || []),
              ...(fetchMoreResult.searchVulnerabilities?.results || []),
            ],
          },
        };
      },
    });
  };

  return {
    vulnerabilities,
    loading,
    error,
    loadMore,
    total,
    hasMore: vulnerabilities.length === pageSize,
  };
};

export const useVulnerability = (id: string) => {
  const { data, loading, error } = useQuery(GET_VULNERABILITY, { variables: { id } });
  return { vulnerability: data?.vulnerability, loading, error };
};

export const useVulnerabilityByCveId = (cveId: string) => {
  const { data, loading, error } = useQuery(GET_VULNERABILITY_BY_CVE, { variables: { cveId } });
  return { vulnerability: data?.vulnerabilityByCveId, loading, error };
};

export const useCreateVulnerability = () => useMutation(CREATE_VULNERABILITY);
export const useUpdateVulnerability = () => useMutation(UPDATE_VULNERABILITY);
export const useDeleteVulnerability = () => useMutation(DELETE_VULNERABILITY);

