import { useQuery, useMutation } from '@apollo/client';
import {
  MALWARE_QUERY,
  SEARCH_MALWARE,
} from '../graphql/malware/queries';
import {
  CREATE_MALWARE,
} from '../graphql/malware/mutations';

// List malware with optional filters
export const useMalware = ({ filters = {}, page = 1, pageSize = 20 } = {}) => {
  const { data, loading, error, fetchMore } = useQuery(SEARCH_MALWARE, {
    variables: {
      filters,
      page,
      pageSize,
    },
    notifyOnNetworkStatusChange: true,
  });

  // Return the full searchMalwareWithFilters object for pagination support
  const malware = data?.searchMalwareWithFilters;
  return { malware, loading, error };
};

// Get malware detail by id
export const useMalwareDetail = (id: string | undefined) => {
  const { data, loading, error } = useQuery(MALWARE_QUERY, {
    variables: { id },
    skip: !id,
  });
  // The backend returns: malware { ... }
  return { malware: data?.malware, loading, error };
};

// Create malware
export const useCreateMalware = () => {
  const [createMalware, { loading, error }] = useMutation(CREATE_MALWARE);
  return { createMalware, loading, error };
};
