import { useQuery, useMutation, useSubscription } from '@apollo/client';
import {
  MALWARE_QUERY,
  SEARCH_MALWARE,
  MALWARE_CREATED_SUBSCRIPTION,
  MALWARE_UPDATED_SUBSCRIPTION,
  MALWARE_DELETED_SUBSCRIPTION,
} from '../graphql/malware/queries';
import { CREATE_MALWARE } from '../graphql/malware/mutations';
import { useEffect, useState } from 'react';
import { Malware } from '@/types/malware';
import { toast } from 'sonner';

// List malware with optional filters
export function useMalware({ filters = {}, page = 1, pageSize = 20 } = {}) {
  const { data, loading, error, subscribeToMore } = useQuery(SEARCH_MALWARE, {
    variables: { filters, page, pageSize },
    notifyOnNetworkStatusChange: true,
    fetchPolicy: 'cache-and-network',
  });

  if (error) {
    toast.error('Error loading malware data', {
      description: error?.message,
    });
  }

  // set up our three subscriptions exactly once
  useEffect(() => {
    const unsubCreate = subscribeToMore({
      document: MALWARE_CREATED_SUBSCRIPTION,
      updateQuery: (prev, { subscriptionData }) => {
        const newItem = subscriptionData.data?.malwareCreated;
        if (!newItem) return prev;
        if (
          prev.searchMalware.results.some((m: Malware) => m.id === newItem.id)
        ) {
          return prev;
        }
        return {
          ...prev,
          searchMalware: {
            ...prev.searchMalware,
            results: [newItem, ...prev.searchMalware.results].slice(
              0,
              pageSize,
            ),
            total: prev.searchMalware.total + 1,
          },
        };
      },
    });

    const unsubUpdate = subscribeToMore({
      document: MALWARE_UPDATED_SUBSCRIPTION,
      updateQuery: (prev, { subscriptionData }) => {
        const updated = subscriptionData.data?.malwareUpdated;
        if (!updated) return prev;
        return {
          ...prev,
          searchMalware: {
            ...prev.searchMalware,
            results: prev.searchMalware.results.map((m: Malware) =>
              m.id === updated.id ? { ...m, ...updated } : m,
            ),
          },
        };
      },
    });

    const unsubDelete = subscribeToMore({
      document: MALWARE_DELETED_SUBSCRIPTION,
      updateQuery: (prev, { subscriptionData }) => {
        const deletedId = subscriptionData.data?.malwareDeleted;
        if (!deletedId) return prev;
        return {
          ...prev,
          searchMalware: {
            ...prev.searchMalware,
            results: prev.searchMalware.results.filter(
              (m: Malware) => m.id !== deletedId,
            ),
            total: prev.searchMalware.total - 1,
          },
        };
      },
    });

    return () => {
      unsubCreate();
      unsubUpdate();
      unsubDelete();
    };
  }, [subscribeToMore, pageSize]);

  return {
    results: data?.searchMalware.results || [],
    total: data?.searchMalware.total || 0,
    loading,
    error,
  };
}

// Get malware detail by id
export const useMalwareDetail = (id: string | undefined) => {
  const { data, loading, error } = useQuery(MALWARE_QUERY, {
    variables: { id },
    skip: !id,
  });
  // The backend returns: malware { ... }
  return { malware: data?.malware, loading, error };
};
