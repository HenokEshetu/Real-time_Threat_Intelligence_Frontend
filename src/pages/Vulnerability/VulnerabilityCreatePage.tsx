import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectTrigger, SelectContent, SelectItem, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { useCreateVulnerability } from '@/hooks/useVulnerability';

const CONFIDENCE_LEVELS = [
  { value: 100, label: '1 - Confirmed by other sources' },
  { value: 80, label: '2 - Probably True' },
  { value: 60, label: '3 - Possibly True' },
  { value: 40, label: '4 - Doubtful' },
  { value: 20, label: '5 - Improbable' },
  { value: 0, label: '6 - Truth Cannot be judged' },
];

const MARKING_LABELS = [
  'TLP:CLEAR',
  'TLP:GREEN',
  'TLP:AMBER+STRICT',
  'TLP:AMBER',
  'TLP:RED',
];

export const VulnerabilityCreatePage = () => {
  const navigate = useNavigate();
  const [createVulnerability, { loading }] = useCreateVulnerability();
  const [values, setValues] = useState({
    name: '',
    published_date: '',
    cve_id: '',
    cvss_v3_score: '',
    cvss_v3_vector: '',
    affected_products: '',
    confidence: 100,
    confidenceLevel: CONFIDENCE_LEVELS[0].label,
    description: '',
    object_marking_refs: '',
  });
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const handleChange = (field: string, value: any) => {
    setValues((prev) => ({ ...prev, [field]: value }));
    setErrors((prev) => ({ ...prev, [field]: '' }));
  };

  const validate = () => {
    const newErrors: { [key: string]: string } = {};
    if (!values.name) newErrors.name = 'This field is required';
    if (!values.published_date) newErrors.published_date = 'This field is required';
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const getConfidenceLabel = (val: number) => {
    for (let i = 0; i < CONFIDENCE_LEVELS.length; i++) {
      if (val >= CONFIDENCE_LEVELS[i].value) return CONFIDENCE_LEVELS[i].label;
    }
    return CONFIDENCE_LEVELS[CONFIDENCE_LEVELS.length - 1].label;
  };

  const getConfidenceValue = (label: string) => {
    const found = CONFIDENCE_LEVELS.find((l) => l.label === label);
    return found ? found.value : 0;
  };

  const handleConfidenceChange = (
    field: 'confidence' | 'confidenceLevel',
    value: number | string,
  ) => {
    if (field === 'confidence') {
      const num = typeof value === 'number' ? value : parseInt(value as string, 10);
      setValues((prev) => ({
        ...prev,
        confidence: num,
        confidenceLevel: getConfidenceLabel(num),
      }));
    } else {
      setValues((prev) => ({
        ...prev,
        confidenceLevel: value as string,
        confidence: getConfidenceValue(value as string),
      }));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validate()) return;
    try {
      await createVulnerability({
        variables: {
          input: {
            name: values.name,
            published_date: values.published_date,
            cve_id: values.cve_id,
            cvss_v3_score: values.cvss_v3_score,
            cvss_v3_vector: values.cvss_v3_vector,
            affected_products: values.affected_products ? values.affected_products.split(',').map(s => s.trim()) : [],
            confidence: values.confidence,
            description: values.description,
            object_marking_refs: values.object_marking_refs ? [values.object_marking_refs] : [],
          }
        }
      });
      navigate('/vulnerability');
    } catch (err: any) {
      setErrors({ submit: err.message || 'Failed to create vulnerability' });
    }
  };

  return (
    <div className="min-h-screen bg-muted flex flex-col">
      <div className="w-full bg-background border-b px-4 py-3 flex items-center">
        <Button variant="ghost" size="icon" onClick={() => navigate(-1)} className="mr-2">
          <span className="sr-only">Close</span>
          <svg width="20" height="20" fill="none" stroke="currentColor"><path d="M15 5L5 15M5 5l10 10" strokeWidth="2" strokeLinecap="round" /></svg>
        </Button>
        <h1 className="text-lg font-semibold">Create a vulnerability</h1>
      </div>
      <form onSubmit={handleSubmit} className="max-w-xl w-full mx-auto mt-8 bg-background rounded-xl shadow p-6 space-y-6">
        {/* Name */}
        <div className="relative mt-6">
          <div className={`border rounded-xl px-4 pt-5 pb-3 ${errors.name ? 'border-destructive' : 'border-input'} bg-background`}>
            <Input
              id="name"
              value={values.name}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChange('name', e.target.value)}
              placeholder="Vulnerability name"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="name"
            className={`absolute -top-3 left-4 bg-background px-2 text-sm font-medium ${errors.name ? 'text-destructive' : 'text-muted-foreground'}`}
          >
            Name <span className="text-destructive">*</span>
          </Label>
          {errors.name && <div className="text-destructive text-xs mt-1">{errors.name}</div>}
        </div>
        {/* Published Date */}
        <div className="relative mt-6">
          <div className={`border rounded-xl px-4 pt-5 pb-3 ${errors.published_date ? 'border-destructive' : 'border-input'} bg-background`}>
            <Input
              id="published_date"
              type="date"
              value={values.published_date}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChange('published_date', e.target.value)}
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="published_date"
            className={`absolute -top-3 left-4 bg-background px-2 text-sm font-medium ${errors.published_date ? 'text-destructive' : 'text-muted-foreground'}`}
          >
            Publication date <span className="text-destructive">*</span>
          </Label>
          {errors.published_date && <div className="text-destructive text-xs mt-1">{errors.published_date}</div>}
        </div>
        {/* CVE ID */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="cve_id"
              value={values.cve_id}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChange('cve_id', e.target.value)}
              placeholder="CVE ID"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="cve_id"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            CVE ID
          </Label>
        </div>
        {/* CVSS v3 Score */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="cvss_v3_score"
              value={values.cvss_v3_score}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChange('cvss_v3_score', e.target.value)}
              placeholder="CVSS v3 Score"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="cvss_v3_score"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            CVSS v3 Score
          </Label>
        </div>
        {/* CVSS v3 Vector */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="cvss_v3_vector"
              value={values.cvss_v3_vector}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChange('cvss_v3_vector', e.target.value)}
              placeholder="CVSS v3 Vector"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="cvss_v3_vector"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            CVSS v3 Vector
          </Label>
        </div>
        {/* Affected Products */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="affected_products"
              value={values.affected_products}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleChange('affected_products', e.target.value)}
              placeholder="Affected products (comma separated)"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="affected_products"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Affected Products
          </Label>
        </div>
        {/* Confidence */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <div className="flex items-center gap-2">
              <Input
                type="number"
                min={0}
                max={100}
                value={values.confidence}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleConfidenceChange('confidence', Number(e.target.value))}
                className="w-20 bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
              />
              <Select
                value={values.confidenceLevel}
                onValueChange={val => handleConfidenceChange('confidenceLevel', val)}
              >
                <SelectTrigger className="min-w-[220px] bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none">
                  <SelectValue placeholder="Select confidence" />
                </SelectTrigger>
                <SelectContent>
                  {CONFIDENCE_LEVELS.map(level => (
                    <SelectItem key={level.label} value={level.label}>{level.label}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="w-full mt-2">
              <input
                type="range"
                min={0}
                max={100}
                step={1}
                value={values.confidence}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleConfidenceChange('confidence', Number(e.target.value))}
                className="w-full h-2 rounded-lg appearance-none cursor-pointer bg-blue-400"
                style={{ accentColor: 'currentColor' }}
              />
            </div>
          </div>
          <Label
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Confidence level
          </Label>
        </div>
        {/* Description */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <textarea
              id="description"
              value={values.description}
              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleChange('description', e.target.value)}
              placeholder="Write a description in markdown..."
              rows={4}
              className="w-full bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none resize-none"
            />
          </div>
          <Label
            htmlFor="description"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Description
          </Label>
        </div>
        {/* Markings */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Select
              value={values.object_marking_refs}
              onValueChange={val => handleChange('object_marking_refs', val)}
            >
              <SelectTrigger id="markings" className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none">
                <SelectValue placeholder="Select marking" />
              </SelectTrigger>
              <SelectContent>
                {MARKING_LABELS.map(label => (
                  <SelectItem key={label} value={label}>{label}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            {values.object_marking_refs && (
              <div className="flex flex-wrap gap-1 mt-2">
                <Badge variant="secondary">{values.object_marking_refs}</Badge>
              </div>
            )}
          </div>
          <Label
            htmlFor="markings"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Marking
          </Label>
        </div>
        {/* Submit */}
        <div className="pt-2">
          <Button type="submit" variant="default" className="w-full" disabled={loading}>
            {loading ? 'Creating...' : 'Create'}
          </Button>
          {errors.submit && <div className="text-destructive text-xs mt-2">{errors.submit}</div>}
        </div>
      </form>
    </div>
  );
};
export default VulnerabilityCreatePage;
