import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { useMalwareDetail } from "@/hooks/useMalware";
import { useMutation } from "@apollo/client";
import { UPDATE_MALWARE } from "@/graphql/malware/mutations";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

const MALWARE_TYPES = [
  "ADWARE", "BACKDOOR", "BOT", "DDOS", "DROPPER", "EXPLOIT_KIT", "KEYLOGGER",
  "RANSOMWARE", "REMOTE_ACCESS_TROJAN", "RESOURCE_EXPLOITATION", "ROGUE_SECURITY_SOFTWARE",
  "ROOTKIT", "SCREEN_CAPTURE", "SPYWARE", "TROJAN", "UNKNOWN", "VIRUS", "WEBSHELL", "WIPER", "WORM"
];

export const MalwaresEditPage = () => {
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const { malware, loading, error } = useMalwareDetail(id);
  const [updateMalware, { loading: updating, error: updateError }] = useMutation(UPDATE_MALWARE);

  const [values, setValues] = useState<any>({
    name: "",
    description: "",
    malware_types: [],
    is_family: false,
    first_seen: "",
    last_seen: "",
    aliases: "",
    labels: "",
    confidence: 100,
    created_by_ref: "",
    architecture_execution_envs: "",
    implementation_languages: "",
    capabilities: "",
    sample_refs: "",
    operating_system_refs: "",
    object_marking_refs: "",
    revoked: false,
    lang: "",
  });
  const [formError, setFormError] = useState<string | null>(null);

  useEffect(() => {
    if (malware) {
      setValues({
        name: malware.name || "",
        description: malware.description || "",
        malware_types: malware.malware_types || [],
        is_family: !!malware.is_family,
        first_seen: malware.first_seen ? malware.first_seen.slice(0, 10) : "",
        last_seen: malware.last_seen ? malware.last_seen.slice(0, 10) : "",
        aliases: Array.isArray(malware.aliases) ? malware.aliases.join(", ") : "",
        labels: Array.isArray(malware.labels) ? malware.labels.join(", ") : "",
        confidence: typeof malware.confidence === "number" ? malware.confidence : 100,
        created_by_ref: malware.created_by_ref || "",
        architecture_execution_envs: Array.isArray(malware.architecture_execution_envs) ? malware.architecture_execution_envs.join(", ") : "",
        implementation_languages: Array.isArray(malware.implementation_languages) ? malware.implementation_languages.join(", ") : "",
        capabilities: Array.isArray(malware.capabilities) ? malware.capabilities.join(", ") : "",
        sample_refs: malware.sample_refs || "",
        operating_system_refs: Array.isArray(malware.operating_system_refs) ? malware.operating_system_refs.join(", ") : "",
        object_marking_refs: Array.isArray(malware.object_marking_refs) ? malware.object_marking_refs[0] : "",
        revoked: !!malware.revoked,
        lang: malware.lang || "",
      });
    }
  }, [malware]);

  const handleChange = (field: string, value: any) => {
    setValues((prev: any) => ({ ...prev, [field]: value }));
    setFormError(null);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!values.name || values.malware_types.length === 0) {
      setFormError("Name and at least one malware type are required.");
      return;
    }
    try {
      await updateMalware({
        variables: {
          id,
          input: {
            ...values,
            aliases: values.aliases ? values.aliases.split(",").map((s: string) => s.trim()) : [],
            labels: values.labels ? values.labels.split(",").map((s: string) => s.trim()) : [],
            architecture_execution_envs: values.architecture_execution_envs ? values.architecture_execution_envs.split(",").map((s: string) => s.trim()) : [],
            implementation_languages: values.implementation_languages ? values.implementation_languages.split(",").map((s: string) => s.trim()) : [],
            capabilities: values.capabilities ? values.capabilities.split(",").map((s: string) => s.trim()) : [],
            sample_refs: values.sample_refs,
            operating_system_refs: values.operating_system_refs ? values.operating_system_refs.split(",").map((s: string) => s.trim()) : [],
            object_marking_refs: values.object_marking_refs ? [values.object_marking_refs] : [],
            malware_types: values.malware_types,
            modified: new Date().toISOString(),
          }
        }
      });
      navigate(`/malware/${id}`);
    } catch (err: any) {
      setFormError(err.message || "Failed to update malware.");
    }
  };

  if (loading) return <div>Loading...</div>;
  if (error || !malware) return <div>Failed to load malware.</div>;

  return (
    <div className="min-h-screen bg-muted flex flex-col">
      <div className="w-full bg-background border-b px-4 py-3 flex items-center">
        <Button variant="ghost" size="icon" onClick={() => navigate(-1)} className="mr-2">
          <span className="sr-only">Close</span>
          <svg width="20" height="20" fill="none" stroke="currentColor"><path d="M15 5L5 15M5 5l10 10" strokeWidth="2" strokeLinecap="round" /></svg>
        </Button>
        <h1 className="text-lg font-semibold">Update Malware</h1>
      </div>
      <form onSubmit={handleSubmit} className="max-w-xl w-full mx-auto mt-8 bg-background rounded-xl shadow p-6 space-y-6">
        <div>
          <Label htmlFor="name">Name *</Label>
          <Input id="name" value={values.name} onChange={e => handleChange("name", e.target.value)} required />
        </div>
        <div>
          <Label htmlFor="description">Description</Label>
          <textarea id="description" value={values.description} onChange={e => handleChange("description", e.target.value)} rows={3} className="w-full border rounded" />
        </div>
        <div>
          <Label htmlFor="malware_types">Malware Types *</Label>
          <select
            id="malware_types"
            multiple
            value={values.malware_types}
            onChange={e => handleChange("malware_types", Array.from(e.target.selectedOptions, o => o.value))}
            className="w-full border rounded"
            required
          >
            {MALWARE_TYPES.map(type => (
              <option key={type} value={type}>{type}</option>
            ))}
          </select>
        </div>
        <div>
          <Label htmlFor="aliases">Aliases (comma separated)</Label>
          <Input id="aliases" value={values.aliases} onChange={e => handleChange("aliases", e.target.value)} />
        </div>
        <div>
          <Label htmlFor="labels">Labels (comma separated)</Label>
          <Input id="labels" value={values.labels} onChange={e => handleChange("labels", e.target.value)} />
        </div>
        <div>
          <Label htmlFor="confidence">Confidence</Label>
          <Input id="confidence" type="number" min={0} max={100} value={values.confidence} onChange={e => handleChange("confidence", Number(e.target.value))} />
        </div>
        <div>
          <Label htmlFor="is_family">Is Family</Label>
          <input id="is_family" type="checkbox" checked={values.is_family} onChange={e => handleChange("is_family", e.target.checked)} />
        </div>
        {/* Add more fields as needed */}
        <div>
          <Button type="submit" disabled={updating}>Update</Button>
        </div>
        {formError && <div className="text-red-600">{formError}</div>}
        {updateError && <div className="text-red-600">{updateError.message}</div>}
      </form>
    </div>
  );
};
