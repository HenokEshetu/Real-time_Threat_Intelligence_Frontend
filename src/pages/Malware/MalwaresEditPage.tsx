import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectTrigger, SelectContent, SelectItem, SelectValue } from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { useMalwareDetail } from "@/hooks/useMalware";

const MALWARE_TYPES = [
  "ransomware",
  "trojan",
  "worm",
  "adware",
  "spyware",
  "rootkit",
  "backdoor",
  "dropper",
  "exploit-kit",
  "bot",
  "keylogger",
  "remote-access-trojan",
  "wiper",
  "stealer",
  "loader",
  "other",
];
const MARKING_LABELS = [
  "TLP:CLEAR",
  "TLP:GREEN",
  "TLP:AMBER+STRICT",
  "TLP:AMBER",
  "TLP:RED",
];

export const MalwaresEditPage = () => {
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const { malware, loading, error } = useMalwareDetail(id);

  const [values, setValues] = useState({
    name: "",
    description: "",
    malware_types: "",
    is_family: false,
    first_seen: "",
    last_seen: "",
    aliases: "",
    labels: "",
    confidence: 100,
    created_by_ref: "",
    architecture_execution_envs: "",
    implementation_languages: "",
    capabilities: "",
    sample_refs: "",
    operating_system_refs: "",
    object_marking_refs: "",
    revoked: false,
    lang: "",
  });
  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  useEffect(() => {
    if (malware) {
      setValues({
        name: malware.name || "",
        description: malware.description || "",
        malware_types: Array.isArray(malware.malware_types) && malware.malware_types.length > 0 ? malware.malware_types[0] : "",
        is_family: !!malware.is_family,
        first_seen: malware.first_seen ? malware.first_seen.slice(0, 10) : "",
        last_seen: malware.last_seen ? malware.last_seen.slice(0, 10) : "",
        aliases: Array.isArray(malware.aliases) && malware.aliases.length > 0 ? malware.aliases.join(", ") : "",
        labels: Array.isArray(malware.labels) && malware.labels.length > 0 ? malware.labels.join(", ") : "",
        confidence: typeof malware.confidence === "number" ? malware.confidence : 100,
        created_by_ref: malware.created_by_ref || "",
        architecture_execution_envs: Array.isArray(malware.architecture_execution_envs) && malware.architecture_execution_envs.length > 0 ? malware.architecture_execution_envs.join(", ") : "",
        implementation_languages: Array.isArray(malware.implementation_languages) && malware.implementation_languages.length > 0 ? malware.implementation_languages.join(", ") : "",
        capabilities: Array.isArray(malware.capabilities) && malware.capabilities.length > 0 ? malware.capabilities.join(", ") : "",
        sample_refs: Array.isArray(malware.sample_refs) && malware.sample_refs.length > 0 ? malware.sample_refs.join(", ") : "",
        operating_system_refs: Array.isArray(malware.operating_system_refs) && malware.operating_system_refs.length > 0 ? malware.operating_system_refs.join(", ") : "",
        object_marking_refs: Array.isArray(malware.object_marking_refs) && malware.object_marking_refs.length > 0 ? malware.object_marking_refs[0] : "",
        revoked: !!malware.revoked,
        lang: malware.lang || "",
      });
    }
  }, [malware]);

  const handleChange = (field: string, value: any) => {
    setValues((prev) => ({ ...prev, [field]: value }));
    setErrors((prev) => ({ ...prev, [field]: "" }));
  };

  const validate = () => {
    const newErrors: { [key: string]: string } = {};
    if (!values.name) newErrors.name = "This field is required";
    if (!values.malware_types) newErrors.malware_types = "This field is required";
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!validate()) return;
    // TODO: submit update logic here
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center text-muted-foreground">
        Loading...
      </div>
    );
  }
  if (error || !malware) {
    return (
      <div className="min-h-screen flex items-center justify-center text-destructive">
        Failed to load malware.
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-muted flex flex-col">
      <div className="w-full bg-background border-b px-4 py-3 flex items-center">
        <Button variant="ghost" size="icon" onClick={() => navigate(-1)} className="mr-2">
          <span className="sr-only">Close</span>
          <svg width="20" height="20" fill="none" stroke="currentColor"><path d="M15 5L5 15M5 5l10 10" strokeWidth="2" strokeLinecap="round" /></svg>
        </Button>
        <h1 className="text-lg font-semibold">Update malware</h1>
      </div>
      <form onSubmit={handleSubmit} className="max-w-xl w-full mx-auto mt-8 bg-background rounded-xl shadow p-6 space-y-6">
        {/* Name */}
        <div className="relative mt-6">
          <div className={`border rounded-xl px-4 pt-5 pb-3 ${errors.name ? "border-destructive" : "border-input"} bg-background`}>
            <Input
              id="name"
              value={values.name}
              onChange={(e) => handleChange("name", e.target.value)}
              placeholder="Malware name"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="name"
            className={`absolute -top-3 left-4 bg-background px-2 text-sm font-medium ${errors.name ? "text-destructive" : "text-muted-foreground"}`}
          >
            Name <span className="text-destructive">*</span>
          </Label>
          {errors.name && <div className="text-destructive text-xs mt-1">{errors.name}</div>}
        </div>
        {/* Description */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <textarea
              id="description"
              value={values.description}
              onChange={(e) => handleChange("description", e.target.value)}
              placeholder="Write a description in markdown..."
              rows={4}
              className="w-full bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none resize-none"
            />
          </div>
          <Label
            htmlFor="description"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Description
          </Label>
        </div>
        {/* Malware Types */}
        <div className="relative mt-6">
          <div className={`border rounded-xl px-4 pt-5 pb-3 ${errors.malware_types ? "border-destructive" : "border-input"} bg-background`}>
            <Select
              value={values.malware_types}
              onValueChange={val => handleChange("malware_types", val)}
            >
              <SelectTrigger id="malware_types" className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none">
                <SelectValue placeholder="Select malware type" />
              </SelectTrigger>
              <SelectContent>
                {MALWARE_TYPES.map(type => (
                  <SelectItem key={type} value={type}>{type}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            {values.malware_types && (
              <div className="flex flex-wrap gap-1 mt-2">
                <Badge>{values.malware_types}</Badge>
              </div>
            )}
          </div>
          <Label
            htmlFor="malware_types"
            className={`absolute -top-3 left-4 bg-background px-2 text-sm font-medium ${errors.malware_types ? "text-destructive" : "text-muted-foreground"}`}
          >
            Malware type <span className="text-destructive">*</span>
          </Label>
          {errors.malware_types && (
            <div className="text-destructive text-xs mt-1">{errors.malware_types}</div>
          )}
        </div>
        {/* Is Family */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background flex items-center gap-3">
            <input
              id="is_family"
              type="checkbox"
              checked={values.is_family}
              onChange={e => handleChange("is_family", e.target.checked)}
              className="mr-2"
            />
            <Label htmlFor="is_family" className="text-sm font-medium text-muted-foreground">
              Is Family
            </Label>
          </div>
        </div>
        {/* First Seen */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="first_seen"
              type="date"
              value={values.first_seen}
              onChange={e => handleChange("first_seen", e.target.value)}
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="first_seen"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            First Seen
          </Label>
        </div>
        {/* Last Seen */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="last_seen"
              type="date"
              value={values.last_seen}
              onChange={e => handleChange("last_seen", e.target.value)}
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="last_seen"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Last Seen
          </Label>
        </div>
        {/* Aliases */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="aliases"
              value={values.aliases}
              onChange={e => handleChange("aliases", e.target.value)}
              placeholder="Comma separated aliases"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="aliases"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Aliases
          </Label>
        </div>
        {/* Labels */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="labels"
              value={values.labels}
              onChange={e => handleChange("labels", e.target.value)}
              placeholder="Comma separated labels"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="labels"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Labels
          </Label>
        </div>
        {/* Confidence */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background flex items-center gap-2">
            <Input
              id="confidence"
              type="number"
              min={0}
              max={100}
              value={values.confidence}
              onChange={e => handleChange("confidence", Number(e.target.value))}
              className="w-24 bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
            <span className="text-muted-foreground text-sm">/ 100</span>
          </div>
          <Label
            htmlFor="confidence"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Confidence
          </Label>
        </div>
        {/* Created By */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="created_by_ref"
              value={values.created_by_ref}
              onChange={e => handleChange("created_by_ref", e.target.value)}
              placeholder="Created by"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="created_by_ref"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Created By
          </Label>
        </div>
        {/* Architecture Execution Envs */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="architecture_execution_envs"
              value={values.architecture_execution_envs}
              onChange={e => handleChange("architecture_execution_envs", e.target.value)}
              placeholder="Comma separated"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="architecture_execution_envs"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Architecture Execution Envs
          </Label>
        </div>
        {/* Implementation Languages */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="implementation_languages"
              value={values.implementation_languages}
              onChange={e => handleChange("implementation_languages", e.target.value)}
              placeholder="Comma separated"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="implementation_languages"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Implementation Languages
          </Label>
        </div>
        {/* Capabilities */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="capabilities"
              value={values.capabilities}
              onChange={e => handleChange("capabilities", e.target.value)}
              placeholder="Comma separated"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="capabilities"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Capabilities
          </Label>
        </div>
        {/* Sample Refs */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="sample_refs"
              value={values.sample_refs}
              onChange={e => handleChange("sample_refs", e.target.value)}
              placeholder="Comma separated"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="sample_refs"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Sample Refs
          </Label>
        </div>
        {/* Operating System Refs */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="operating_system_refs"
              value={values.operating_system_refs}
              onChange={e => handleChange("operating_system_refs", e.target.value)}
              placeholder="Comma separated"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="operating_system_refs"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Operating System Refs
          </Label>
        </div>
        {/* Markings */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Select
              value={values.object_marking_refs}
              onValueChange={val => handleChange("object_marking_refs", val)}
            >
              <SelectTrigger id="object_marking_refs" className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none">
                <SelectValue placeholder="Select marking" />
              </SelectTrigger>
              <SelectContent>
                {MARKING_LABELS.map(label => (
                  <SelectItem key={label} value={label}>{label}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            {values.object_marking_refs && (
              <div className="flex flex-wrap gap-1 mt-2">
                <Badge variant="secondary">{values.object_marking_refs}</Badge>
              </div>
            )}
          </div>
          <Label
            htmlFor="object_marking_refs"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Marking
          </Label>
        </div>
        {/* Revoked */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background flex items-center gap-3">
            <input
              id="revoked"
              type="checkbox"
              checked={values.revoked}
              onChange={e => handleChange("revoked", e.target.checked)}
              className="mr-2"
            />
            <Label htmlFor="revoked" className="text-sm font-medium text-muted-foreground">
              Revoked
            </Label>
          </div>
        </div>
        {/* Language */}
        <div className="relative mt-6">
          <div className="border border-input rounded-xl px-4 pt-5 pb-3 bg-background">
            <Input
              id="lang"
              value={values.lang}
              onChange={e => handleChange("lang", e.target.value)}
              placeholder="Language"
              className="bg-transparent border-none p-0 focus:ring-0 focus-visible:ring-0 focus:border-none focus:outline-none"
            />
          </div>
          <Label
            htmlFor="lang"
            className="absolute -top-3 left-4 bg-background px-2 text-sm font-medium text-muted-foreground"
          >
            Language
          </Label>
        </div>
        {/* Submit */}
        <div className="pt-2">
          <Button type="submit" variant="default" className="w-full">Update</Button>
        </div>
      </form>
    </div>
  );
};
