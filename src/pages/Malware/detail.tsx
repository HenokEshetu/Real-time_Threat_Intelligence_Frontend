import React from 'react';
import { useParams } from 'react-router-dom';
import { useMalwareDetail } from '../../hooks/useMalware';
import { EntityDetail } from '../../components/common/EntityDetail/EntityDetail';
import { BugIcon } from 'lucide-react';
// import ItemIcon from '../../components/ItemIcon';

// Helper to display malware_types as comma-separated string
const formatMalwareTypes = (types: any[] | undefined) =>
  Array.isArray(types)
    ? types
        .map((t) =>
          typeof t === 'string' ? t.replace(/^.*\./, '') : String(t),
        )
        .join(', ')
    : '';

const formatAliases = (aliases: any[] | undefined) =>
  Array.isArray(aliases) ? aliases.join(', ') : '';

const formatKillChainPhases = (phases: any[] | undefined) =>
  Array.isArray(phases)
    ? phases.map((p) => `${p.kill_chain_name}:${p.phase_name}`).join(', ')
    : '';

const formatExternalReferences = (refs: any[] | undefined) =>
  Array.isArray(refs)
    ? refs
        .map((r) => (r.url ? `${r.source_name} (${r.url})` : r.source_name))
        .join(', ')
    : '';

export const MalwareDetailPage = () => {
  const { id } = useParams();
  const { malware, loading, error } = useMalwareDetail(id);

  if (loading) return <div>Loading...</div>;
  if (error) {
    // Add debug output for troubleshooting
    return (
      <div>
        Error loading malware.
        <pre style={{ color: 'red', fontSize: '0.9em' }}>
          {JSON.stringify(error, null, 2)}
        </pre>
      </div>
    );
  }
  if (!malware) return <div>Malware not found.</div>;

  return (
    <EntityDetail
      id={malware.id}
      name={malware.name}
      description={malware.description}
      created={malware.created}
      modified={malware.modified}
      type={malware.type}
      icon={<BugIcon />}
      metadata={{
        labels: Array.isArray(malware.labels) ? malware.labels.join(', ') : '',
        malware_types: formatMalwareTypes(malware.malware_types),
        is_family: malware.is_family ? 'Family' : 'Single',
        first_seen: malware.first_seen
          ? new Date(malware.first_seen).toLocaleDateString()
          : '',
        last_seen: malware.last_seen
          ? new Date(malware.last_seen).toLocaleDateString()
          : '',
        aliases: formatAliases(malware.aliases),
        confidence:
          typeof malware.confidence === 'number'
            ? malware.confidence.toString()
            : '',
        external_references: formatExternalReferences(
          malware.external_references,
        ),
        kill_chain_phases: formatKillChainPhases(malware.kill_chain_phases),
      }}
      hashes={malware.hashes}
      children={null}
    />
  );
};
