import React, { useState, useEffect } from 'react';
import { useMalware } from '@/hooks/useMalware';
import {
  Card,
  CardContent,
  CardTitle,
  CardDescription,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Biohazard, ChevronsLeft, ChevronsRight } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import type { Malware } from '@/types/malware';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { toast } from 'sonner';

const tailwindColors = [
  { bg: 'bg-red-50', border: 'border-red-500', text: 'text-red-600' },
  { bg: 'bg-orange-50', border: 'border-orange-500', text: 'text-orange-600' },
  { bg: 'bg-yellow-50', border: 'border-yellow-500', text: 'text-yellow-600' },
  { bg: 'bg-green-50', border: 'border-green-500', text: 'text-green-600' },
  { bg: 'bg-teal-50', border: 'border-teal-500', text: 'text-teal-600' },
  { bg: 'bg-blue-50', border: 'border-blue-500', text: 'text-blue-600' },
  { bg: 'bg-indigo-50', border: 'border-indigo-500', text: 'text-indigo-600' },
  { bg: 'bg-purple-50', border: 'border-purple-500', text: 'text-purple-600' },
  { bg: 'bg-pink-50', border: 'border-pink-500', text: 'text-pink-600' },
  { bg: 'bg-rose-50', border: 'border-rose-500', text: 'text-rose-600' },
  { bg: 'bg-amber-50', border: 'border-amber-500', text: 'text-amber-600' },
  { bg: 'bg-lime-50', border: 'border-lime-500', text: 'text-lime-600' },
  {
    bg: 'bg-emerald-50',
    border: 'border-emerald-500',
    text: 'text-emerald-600',
  },
  { bg: 'bg-cyan-50', border: 'border-cyan-500', text: 'text-cyan-600' },
  { bg: 'bg-sky-50', border: 'border-sky-500', text: 'text-sky-600' },
  { bg: 'bg-violet-50', border: 'border-violet-500', text: 'text-violet-600' },
  {
    bg: 'bg-fuchsia-50',
    border: 'border-fuchsia-500',
    text: 'text-fuchsia-600',
  },
  {
    bg: 'bg-neutral-100',
    border: 'border-neutral-500',
    text: 'text-neutral-600',
  },
  { bg: 'bg-slate-100', border: 'border-slate-500', text: 'text-slate-600' },
  { bg: 'bg-gray-100', border: 'border-gray-500', text: 'text-gray-600' },
];

const getColorForLabel = (label: string) => {
  const hash = Array.from(label).reduce(
    (acc, char) => char.charCodeAt(0) + acc,
    0,
  );
  return tailwindColors[hash % tailwindColors.length];
};

export const MalwaresPage: React.FC = () => {
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 20;
  // const { malware, loading, error, total } = useMalware({
  //   filters: {},
  //   page: currentPage,
  //   pageSize,
  // });

  const { results, total, loading, error } = useMalware({
    page: currentPage,
    pageSize,
  });
  // const [malwareList, setMalwareList] = useState<Malware[]>([]);
  const navigate = useNavigate();

  useEffect(() => {
    if (error) {
      toast.error('Realtime Update Error', {
        description:
          'Connection to real-time updates failed. Displaying static data.',
      });
    }
  }, [error]);

  const totalPages = Math.ceil((total || 0) / pageSize);

  const handlePageChange = (newPage: number) => {
    setCurrentPage(Math.max(1, Math.min(newPage, totalPages)));
  };

  const formatDate = (dateString?: string) => {
    return dateString ? new Date(dateString).toLocaleDateString() : 'Unknown';
  };

  if (error) {
    return (
      <div className="p-4 bg-red-100 text-red-700 rounded-lg mx-auto max-w-2xl mt-8 text-center">
        Error loading malware data: {error.message}
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4">
      {error && (
        <div className="mb-4 p-4 bg-yellow-100 text-yellow-700 rounded-lg">
          Warning: Real-time updates disabled. {error.message}
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
        {loading ? (
          Array.from({ length: pageSize }).map((_, i) => (
            <Skeleton key={i} className="h-80 rounded-xl" />
          ))
        ) : results.length > 0 ? (
          results.map((mal) => {
            const labels = Array.from(new Set(mal.labels || [])).slice(0, 3);
            const extraLabels = (mal.labels || []).length - labels.length;

            return (
              <Card
                key={mal.id}
                className="h-80 flex flex-col cursor-pointer hover:shadow-lg transition-shadow"
                onClick={() => navigate(`/malware/${mal.id}`)}
              >
                <CardContent className="flex-1 flex flex-col p-4">
                  <div className="flex justify-between items-start mb-2">
                    <CardTitle className="text-lg truncate">
                      {mal.name}
                    </CardTitle>
                    <Badge
                      variant="outline"
                      className="bg-cyan-100 text-cyan-600"
                    >
                      MALWARE
                    </Badge>
                  </div>

                  <CardDescription className="flex-1 mb-4 line-clamp-4">
                    {mal.description || 'No description available'}
                  </CardDescription>

                  <div className="flex flex-wrap gap-2 mb-2">
                    {labels.map((label) => {
                      const color = getColorForLabel(label);
                      return (
                        <Badge
                          key={label}
                          className={`${color.bg} ${color.border} ${color.text}`}
                        >
                          {label}
                        </Badge>
                      );
                    })}
                    {extraLabels > 0 && (
                      <Badge variant="outline">+{extraLabels}</Badge>
                    )}
                  </div>

                  <div className="text-sm space-y-1 text-muted-foreground">
                    <div>
                      <span className="font-medium">First Seen:</span>{' '}
                      {formatDate(mal.first_seen)}
                    </div>
                    <div>
                      <span className="font-medium">Last Seen:</span>{' '}
                      {formatDate(mal.last_seen)}
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })
        ) : (
          <div className="col-span-full text-center py-12 text-gray-500">
            No malware entries found
          </div>
        )}
      </div>

      {totalPages > 1 && (
        <div className="mt-8 flex justify-center items-center gap-2">
          <Button
            variant="outline"
            onClick={() => handlePageChange(1)}
            disabled={currentPage === 1}
          >
            <ChevronsLeft className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            onClick={() => handlePageChange(currentPage - 1)}
            disabled={currentPage === 1}
          >
            Previous
          </Button>

          <span className="px-4">
            Page {currentPage} of {totalPages}
          </span>

          <Button
            variant="outline"
            onClick={() => handlePageChange(currentPage + 1)}
            disabled={currentPage === totalPages}
          >
            Next
          </Button>
          <Button
            variant="outline"
            onClick={() => handlePageChange(totalPages)}
            disabled={currentPage === totalPages}
          >
            <ChevronsRight className="h-4 w-4" />
          </Button>
        </div>
      )}
    </div>
  );
};
