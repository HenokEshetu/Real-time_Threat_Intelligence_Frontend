import React from 'react';
import { useMalware } from '../../hooks/useMalware';
import { Link } from 'react-router-dom';
import { EntityCard } from '../../components/common/EntityCard/EntityCard';

// Helper to display malware_types as comma-separated string
const formatMalwareTypes = (types: any[] | undefined) =>
  Array.isArray(types) ? types.map((t) => (typeof t === 'string' ? t.replace(/^.*\./, '') : String(t))).join(', ') : '';

// Helper to display aliases as comma-separated string
const formatAliases = (aliases: any[] | undefined) =>
  Array.isArray(aliases) ? aliases.join(', ') : '';

export const Malware = () => {
  const { malware, loading, error } = useMalware({});

  if (loading) return <div className="flex justify-center items-center h-40">Loading...</div>;
  if (error) return <div className="text-red-600 text-center mt-4">Error loading malware.</div>;

  // Use .results if paginated, fallback to malware if not
  const malwareList = Array.isArray(malware?.results)
    ? malware.results
    : Array.isArray(malware)
      ? malware
      : [];

  return (
    <div className="max-w-6xl mx-auto px-4 py-8">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-3xl font-bold">Malware</h1>
        <Link
          to="/malware/create"
          className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded transition"
        >
          Create New Malware
        </Link>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {malwareList.map((m: any) => (
          <EntityCard
            key={m.id}
            id={m.id}
            name={m.name}
            description={m.description}
            created={m.created}
            metadata={{
              labels: Array.isArray(m.labels) ? m.labels.join(', ') : '',
              malware_types: formatMalwareTypes(m.malware_types),
              is_family: m.is_family ? 'Family' : 'Single',
              first_seen: m.first_seen ? new Date(m.first_seen).toLocaleDateString() : '',
              last_seen: m.last_seen ? new Date(m.last_seen).toLocaleDateString() : '',
              aliases: formatAliases(m.aliases),
              confidence: typeof m.confidence === 'number' ? m.confidence.toString() : '',
            }}
            entityType="malware"
            title={m.name}
            subtitle={formatMalwareTypes(m.malware_types)}
          />
        ))}
      </div>
    </div>
  );
};
