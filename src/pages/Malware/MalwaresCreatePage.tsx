import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
// import { useCreateMalware } from "@/hooks/useMalware";
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

const MALWARE_TYPES = [
  'ADWARE',
  'BACKDOOR',
  'BOT',
  'DDOS',
  'DROPPER',
  'EXPLOIT_KIT',
  'KEYLOGGER',
  'RANSOMWARE',
  'REMOTE_ACCESS_TROJAN',
  'RESOURCE_EXPLOITATION',
  'ROGUE_SECURITY_SOFTWARE',
  'ROOTKIT',
  'SCREEN_CAPTURE',
  'SPYWARE',
  'TROJAN',
  'UNKNOWN',
  'VIRUS',
  'WEBSHELL',
  'WIPER',
  'WORM',
];

export const MalwaresCreatePage: React.FC = () => {
  const navigate = useNavigate();
  // const { createMalware, loading, error } = useCreateMalware();
  const [values, setValues] = useState({
    name: '',
    description: '',
    malware_types: [],
    is_family: false,
    first_seen: '',
    last_seen: '',
    aliases: '',
    labels: '',
    confidence: 100,
    created_by_ref: '',
    architecture_execution_envs: '',
    implementation_languages: '',
    capabilities: '',
    sample_refs: '',
    operating_system_refs: '',
    object_marking_refs: '',
    revoked: false,
    lang: '',
    spec_version: '2.1',
    type: 'malware',
    created: new Date().toISOString(),
    modified: new Date().toISOString(),
    id: '',
  });
  const [formError, setFormError] = useState<string | null>(null);

  const handleChange = (field: string, value: any) => {
    setValues((prev) => ({ ...prev, [field]: value }));
    setFormError(null);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!values.name || values.malware_types.length === 0) {
      setFormError('Name and at least one malware type are required.');
      return;
    }
    try {
      // await createMalware({
      //   variables: {
      //     input: {
      //       ...values,
      //       id: undefined,
      //       aliases: values.aliases ? values.aliases.split(",").map((s) => s.trim()) : [],
      //       labels: values.labels ? values.labels.split(",").map((s) => s.trim()) : [],
      //       architecture_execution_envs: values.architecture_execution_envs ? values.architecture_execution_envs.split(",").map((s) => s.trim()) : [],
      //       implementation_languages: values.implementation_languages ? values.implementation_languages.split(",").map((s) => s.trim()) : [],
      //       capabilities: values.capabilities ? values.capabilities.split(",").map((s) => s.trim()) : [],
      //       sample_refs: values.sample_refs,
      //       operating_system_refs: values.operating_system_refs ? values.operating_system_refs.split(",").map((s) => s.trim()) : [],
      //       object_marking_refs: values.object_marking_refs ? [values.object_marking_refs] : [],
      //       malware_types: values.malware_types,
      //       created: new Date().toISOString(),
      //       modified: new Date().toISOString(),
      //     }
      //   }
      // });
      navigate('/malware');
    } catch (err: any) {
      setFormError(err.message || 'Failed to create malware.');
    }
  };

  return (
    <div className="min-h-screen bg-muted flex flex-col">
      <div className="w-full bg-background border-b px-4 py-3 flex items-center">
        <h1 className="text-lg font-semibold">Create Malware</h1>
      </div>
      <form
        onSubmit={handleSubmit}
        className="max-w-xl w-full mx-auto mt-8 bg-background rounded-xl shadow p-6 space-y-6"
      >
        <div>
          <Label htmlFor="name">Name *</Label>
          <Input
            id="name"
            value={values.name}
            onChange={(e) => handleChange('name', e.target.value)}
            required
          />
        </div>
        <div>
          <Label htmlFor="description">Description</Label>
          <textarea
            id="description"
            value={values.description}
            onChange={(e) => handleChange('description', e.target.value)}
            rows={3}
            className="w-full border rounded"
          />
        </div>
        <div>
          <Label htmlFor="malware_types">Malware Types *</Label>
          <select
            id="malware_types"
            multiple
            value={values.malware_types}
            onChange={(e) =>
              handleChange(
                'malware_types',
                Array.from(e.target.selectedOptions, (o) => o.value),
              )
            }
            className="w-full border rounded"
            required
          >
            {MALWARE_TYPES.map((type) => (
              <option key={type} value={type}>
                {type}
              </option>
            ))}
          </select>
        </div>
        <div>
          <Label htmlFor="aliases">Aliases (comma separated)</Label>
          <Input
            id="aliases"
            value={values.aliases}
            onChange={(e) => handleChange('aliases', e.target.value)}
          />
        </div>
        <div>
          <Label htmlFor="labels">Labels (comma separated)</Label>
          <Input
            id="labels"
            value={values.labels}
            onChange={(e) => handleChange('labels', e.target.value)}
          />
        </div>
        <div>
          <Label htmlFor="confidence">Confidence</Label>
          <Input
            id="confidence"
            type="number"
            min={0}
            max={100}
            value={values.confidence}
            onChange={(e) => handleChange('confidence', Number(e.target.value))}
          />
        </div>
        <div>
          <Label htmlFor="is_family">Is Family</Label>
          <input
            id="is_family"
            type="checkbox"
            checked={values.is_family}
            onChange={(e) => handleChange('is_family', e.target.checked)}
          />
        </div>
        {/* Add more fields as needed */}
        {/* <div> */}
        {/* <Button type="submit" disabled={loading}>Create</Button>
        </div>
        {formError && <div className="text-red-600">{formError}</div>}
        {error && <div className="text-red-600">{error.message}</div>} */}
      </form>
    </div>
  );
};

export default MalwaresCreatePage;
